<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[mysql事务隔离级别]]></title>
      <url>%2F2018%2F02%2F28%2Fmysql%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%2F</url>
      <content type="text"><![CDATA[InnoDB事务模型事务隔离级别事务隔离是数据库的基础。隔离是ACID中的I，隔离级别是用来调整性能，可靠性，一致性和当多个事务同时改变或查询一个结果时的复现性的。 InnoDB提供了四中隔离级别， READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE。默认的隔离界别是REPEATABLE READ。 使用 SET TRANSACTION 用户可以改变一个回话的隔离级别或全部后续链接的隔离级别。也可以在命令行或option文件中使用 –transaction-isolation 来设置默认的隔离级别。 InnoDB对每种隔离级别使用不同的锁策略。 REPEATABLE READ 可以给你带来高一致性，你也可以使用 READ COMMITTED，甚至 READ UNCOMMITTED 来放松对一致性的要求。当然你也可以用SERIALIZABLE增强约束，它一般用于特殊场景下，比如XA或解决并发死锁问题。 下面描述了MySQL支持的四种隔离界别，顺序是按照使用频率来的: REPEATABLE READ这个是InnoDB的默认隔离级别。读一致性，在一个事务内每次读的都是第一次读的快照。这意味着如果你在同一个事务里发起多次的普通select操作它们是一致的。 对于locking read(SELECT with FOR UPDATE 或 LOCK IN SHARE MODE)，更新，删除，锁依赖于该语句是否是使用唯一检索条件或范围检索条件的唯一索引。 - 如果是唯一索引并且是唯一的检索条件，InnoDB仅仅使用index record锁，而不用gap锁。 - 如果是其他检索条件，InnoDB使用index锁，next-key或gap-key来阻塞其他回话对该区间的插入行为。 READ COMMITTED每次读都是设置并且读取自己的快照(即便是在同一个事务内)。 对于locking read (SELECT with FOR UPDATE or LOCK IN SHARE MODE)，update，delete，InnoDB仅仅有index锁，不会有gaps锁，所以其他事务可以随意在上锁的索引记录附近插入记录。gap锁仅仅用于外键约束和duplicate-key检查。 因为gap锁不在了，所以可能会有幻读问题(phantom problems)，因为其他事务可以在区间插入新的记录。 使用 READ COMMITTED 有如下影响： - 对于update或delete，InnoDB仅仅锁住那些它需要update或delete的行。那些没有匹配上的行上的record locks会在where条件计算完后释放。这会大大降低死锁可能，但依然可能发生。 - 对于update，如果该行已经锁定了，InnoDB执行“semi-consistent”读，它返回最近的一次提交版本给mysql，让mysql确定改行是否符合update的where条件。如果匹配(一定会被更新)，mysql就会再次读取该行，这次InnoDB要么锁住它，要么等待锁住它。 看一下下面一个例子: 123CREATE TABLE t (a INT NOT NULL, b INT) ENGINE = InnoDB;INSERT INTO t VALUES (1,2),(2,3),(3,2),(4,3),(5,2);COMMIT; 在这个例子中，table没有索引，所以检索和扫描用的是隐藏的clustered索引。 假设有一个回话执行如下update操作: 123# Session ASTART TRANSACTION;UPDATE t SET b = 5 WHERE b = 3; 假设又有一个回话做下面的update操作: 12# Session BUPDATE t SET b = 4 WHERE b = 2; 当使用默认的REPEATABLE READ隔离级别的时候，第一个update会给它读的每一行上x-lock，并且不会释放它们: 12345x-lock(1,2); retain x-lockx-lock(2,3); update(2,3) to (2,5); retain x-lockx-lock(3,2); retain x-lockx-lock(4,3); update(4,3) to (4,5); retain x-lockx-lock(5,2); retain x-lock 此时第二个update会阻塞，知道第一个结束或回滚: 1x-lock(1,2); block and wait for first UPDATE to commit or roll back 如果是READ COMMITTED隔离级别，第一个update会给它读过的每一行上x-lock，但是会释放那些不需要修改的。 12345x-lock(1,2); unlock(1,2)x-lock(2,3); update(2,3) to (2,5); retain x-lockx-lock(3,2); unlock(3,2)x-lock(4,3); update(4,3) to (4,5); retain x-lockx-lock(5,2); unlock(5,2) 此时第二个update来了，InnoDB会执行“semi-consistent”读，返回每一行的最后一个提交的版本，然后确定改行是否需要修改: 12345x-lock(1,2); update(1,2) to (1,4); retain x-lockx-lock(2,3); unlock(2,3)x-lock(3,2); update(3,2) to (3,4); retain x-lockx-lock(4,3); unlock(4,3)x-lock(5,2); update(5,2) to (5,4); retain x-lock 使用READ COMMITTED隔离级别和启用 innodb_locks_unsafe_for_binlog 配置的效果一样，除了: - innodb_locks_unsafe_for_binlog是全局设置，而隔离级别可以使全局，全部回话甚至是一个回话。 - innodb_locks_unsafe_for_binlog只能服务启动的时候设置，但是隔离界别可以随时更改。 READ UNCOMMITTED随意读，可能会有脏读 SERIALIZABLE这个级别和REPEATABLE READ很想，只是InnoDB给每个select隐式的加上了 SELECT … LOCK IN SHARE MODE。 其实就是全部事情都线性执行了。 关于幻读的问题，网上有很多说法，有说RR级别能防止幻读的，有说不行的。但是主要取决于你对幻读的理解，官网上说RR模式下能避免幻读。先看一下官网对幻读的定义: 幻读是指在一个事务内同样的查询在不同的时间得到不同的结果。 假设在id列上有索引，你想读取并且锁住全部大于100的记录用于以后更新: 1SELECT * FROM child WHERE id &gt; 100 FOR UPDATE; 其实就是在执行上面语句的时候，利用next-key的机制不仅仅锁住了index record，而且还有gap lock。他会阻止其他事务想该表中插入任务id大于100的记录。 有一种别的说法在如下情况下会出现“幻读”： 12345678transaction1:START TRANSACTION;SELECT * FROM child WHERE id &gt; 100 ;transaction2:START TRANSACTION;INSERT INTO child(id,a) VALUES (103,2);COMMIT; 此时再次在transaction1中执行 SELECT * FROM child WHERE id &gt; 100 ; 不会出现刚刚插入的行。但是如果在transaction1中执行 update child set a = 2; 然后在执行select就会发现出现了刚刚插入的行。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql锁和事务]]></title>
      <url>%2F2018%2F02%2F27%2Fmysql%E9%94%81%E5%92%8C%E4%BA%8B%E5%8A%A1%2F</url>
      <content type="text"><![CDATA[MySQL InnoDB 锁版本 5.7 共享锁和排它锁InnoDB实现了两种标准的行锁，共享锁(shared lock)和排它锁(exclusive lock)。 共享锁允许持有它的事务读取改行 排它锁允许持有它的事务更新或删除改行 如果事务T1持有行r的共享锁，者别的事务T2对行r的请求会按如下处理: 如果是s锁的请求，者立刻得到授权，并且此时T1和T2都会持有行r的s锁 若果是x锁的请求者不能被直接授权 如果事务T1持有的是行r的排他锁，其他任何事务的任务请求都不会得到授权，其他事务要等待T1释放行r上的锁。 意向锁(intention locks)InnoDB支持多种粒度的锁，它可以让行锁和表锁共存。比如说， LOCK TABLES … WRITE 会对指定表上x锁。InnoDB使用意向锁来实现多个粒度的锁。意向锁是表级别的锁。它代表着事务可能会在后面对表中的行申请s或x锁。我们有两种意向锁: 意向共享锁(IS) 表明事务有对表中的某一行设置共享锁的意向。 意向排他锁(IX) 表明事务有队表中的某一行设置排它锁的意向。 比如 SELECT … LOCK IN SHARE MODE 设置了一个IS锁, SELECT … FOR UPDATE 设置了一个IX锁。 意向锁的规则如下: 一个事务想要在表中的某一行获得s锁的前提是，它首先获得IS锁或比IS锁更强的锁。 一个事务想要在表中的某一行获得x锁的前提是，它首先获得IX锁。 当事务申请的锁和当前锁的关系为compatible时，它可以获得该锁，但如果是conflicts，该事物必须等待当前所释放。如果事务所需的锁和当前锁conflicts，并且因为死锁的原因导致无法获得，就会出错。 除全表请求(LOCK TABLES … WRITE)外，意向锁不会阻塞任何事。它的主要目的是表明有事务将要锁某行。 记录锁(Record Locks)记录锁会锁定一个索引记录。比如，SELECT c1 FROM t WHERE c1 = 10 FOR UPDATE 会阻止其他任何事务插入，更新或删除t.c1=10的行。记录锁一定会锁住索引记录，即使这个表没有定义索引。这种情况下，InnoDB会创建一个隐含的clustered索引，然后为记录所使用这个索引。 间隙锁(Gap Locks)间隙锁是一个锁住索引之间，或第一个索引之前，或最后一个索引之后的记录。比如 SELECT c1 FROM t WHERE c1 BETWEEN 10 and 20 FOR UPDATE会阻止其他事务插入c1值为15的记录，无论这个值是否存在，因为在间隙内的所有值都被锁了。 间隙锁可以跨越一个索引值，多个索引值甚至是0个索引值。 间隙锁是性能和并发性的一个权衡，它用于一些隔离级别上。 当使用唯一索引来检索唯一行的时候不需要间隙锁。(它不包括检索条件是一个多值唯一索引中的一部分值的情况)比如，如果id是唯一索引，这下面这个语句只会在id为100的记录上加index锁，而不会在它之前的间隙里加间隙锁。 1SELECT * FROM child WHERE id = 100; 如果id没有索引或是一个非唯一的索引，上面的语句会锁住之前的间隙。 值得注意的是不同的事务可以持有冲突的间隙锁。比如，事务A可以持有一个间隙共享锁(gap S-lock),事务B可以在同一个间隙中持有间隙排它锁(gap X-lock)。？？ 在InnoDB中间隙锁是“purely inhibitive”的，它意味着间隙锁只阻止事务插入到该间隙。它不阻止其他事务在同一个gap上获取锁。因此，间隙共享锁和间隙排它锁作用相同。 间隙锁可以显示的禁止。你可以吧事务隔离级别设为READ COMMITTED或者启用innodb_locks_unsafe_for_binlog变量(这个已经被废弃了)。在这种情况下间隙锁只会被用于外键约束检测和重复key值检测了。 Next-Key LocksNext-Key锁是索引记录上的record锁和索引近路之前的gap锁的组合。 InnoDB是以下面的方式来执行级别的锁，当搜索或扫描一个表的索引时，它会在遇到的索引记录上加s或x锁。所以行锁实际上就是index-record锁。索引记录上的next-key锁也会影响所以记录之前的区间。因此next-key锁是index-record锁加上索引之前的间隙。如果一个会话在索引记录R上有s或x锁，其他会话不能在索引顺序在R之前的区间中插入新的值。 假设一个索引有值10，11，13，20。可能的next-key如下： 12345(negative infinity, 10](10, 11](11, 13](13, 20](20, positive infinity) 最后一种情况下，next-key仅仅锁了一个间隙。默认情况下，InnoDB工作在 REPEATABLE READ 事务隔离级别下，此时它使用next-key来检索和遍历索引。它可以避免phantom行（后面会讲到）。 插入意向锁(REPEATABLE READ)插入意向锁是insert上的gap锁，优先级高于行插入。这个锁标明希望用如下方式插入记录的意向:当多个事务插入同一个索引间隙，如果它们插入的不是同一个位置，它们就不需要等待其他事务。假设在4和7之间个index record， 两个事务尝试插入5和6，在获取x锁之前，它们都会获得4和7间隙中的插入意向锁。 下面一个例子说明事务获得插入意向锁的优先级高于被插入记录上的排他锁。假设我们有两个客户端A和B。A创建了一个表有两个索引记录 90和102，然后开启了一个事务，获取Id大于100的x锁。这个x锁包含一个小于102的gap锁。 12345678910mysql&gt; CREATE TABLE child (id int(11) NOT NULL, PRIMARY KEY(id)) ENGINE=InnoDB;mysql&gt; INSERT INTO child (id) values (90),(102);mysql&gt; START TRANSACTION;mysql&gt; SELECT * FROM child WHERE id &gt; 100 FOR UPDATE;+-----+| id |+-----+| 102 |+-----+ 这时B开启了一个事务，插入一个值到该gap中。这个事务先获得插入意向锁，然后等待获取x锁。12mysql&gt; START TRANSACTION;mysql&gt; INSERT INTO child (id) VALUES (101); 插入语句的事务数据如下: 123456RECORD LOCKS space id 31 page no 3 n bits 72 index `PRIMARY` of table `test`.`child`trx id 8731 lock_mode X locks gap before rec insert intention waitingRecord lock, heap no 3 PHYSICAL RECORD: n_fields 3; compact format; info bits 0 0: len 4; hex 80000066; asc f;; 1: len 6; hex 000000002215; asc " ;; 2: len 7; hex 9000000172011c; asc r ;;... 自增锁(AUTO-INC Locks)自增锁是一个特殊的表级别的锁，它出现在当一个事务想要插入一个有AUTO_INCREMENT列的表的时候。在这种情况下，如果一个事务想要在该表中插入值，其他想插入数据的表必须等待它完成。 innodb_autoinc_lock_mode可以控制自增锁的算法，它允许你权衡自增值的可以测性和插入操作的并发性。。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[设计模式系列---结构型模式1]]></title>
      <url>%2F2018%2F02%2F12%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F1%2F</url>
      <content type="text"><![CDATA[结构型模式适配器模式将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。假设船长想使用RowingBoat出海1234567891011121314public class Captain &#123; private RowingBoat rowingBoat; public Captain() &#123;&#125; public Captain(RowingBoat rowingBoat) &#123; this.rowingBoat = rowingBoat; &#125; public void setRowingBoat(RowingBoat rowingBoat) &#123; this.rowingBoat = rowingBoat; &#125; public void row() &#123; rowingBoat.row(); &#125;&#125; RowingBoat的接口如下:123public interface RowingBoat &#123; void row();&#125; 此时你只有一个FishingBoat，实现如下:1234567 public class FishingBoat &#123; private static final Logger LOGGER = LoggerFactory.getLogger(FishingBoat.class); public void sail() &#123; LOGGER.info("The fishing boat is sailing"); &#125;&#125;r 为了能出海，我们需要有一个adapter，把FishingBoat适配成RowingBoat:12345678910public class FishingBoatAdapter implements RowingBoat &#123; private FishingBoat boat; public FishingBoatAdapter() &#123; boat = new FishingBoat(); &#125; @Override public void row() &#123; boat.sail(); &#125;&#125; 装饰器模式允许向一个现有的对象添加新的功能，同时又不改变其结构。使用装饰比使用子类要灵活，而且不会造成子类膨胀的问题。例如有一个接口Troll:12345public interface Troll &#123; void attack(); int getAttackPower(); void fleeBattle();&#125; 他有一个简单的实现:123456789101112131415public class SimpleTroll implements Troll &#123; private static final Logger LOGGER = LoggerFactory.getLogger(SimpleTroll.class); @Override public void attack() &#123; LOGGER.info("The troll tries to grab you!"); &#125; @Override public int getAttackPower() &#123; return 10; &#125; @Override public void fleeBattle() &#123; LOGGER.info("The troll shrieks in horror and runs away!"); &#125;&#125; 这时我们想给这个实现增加一点其他的功能，比如给这个巨人配备一个棒子:1234567891011121314151617181920212223public class ClubbedTroll implements Troll &#123; private static final Logger LOGGER = LoggerFactory.getLogger(ClubbedTroll.class); private Troll decorated; public ClubbedTroll(Troll decorated) &#123; this.decorated = decorated; &#125; @Override public void attack() &#123; decorated.attack(); LOGGER.info("The troll swings at you with a club!"); &#125; @Override public int getAttackPower() &#123; //哈哈哈，我的攻击+10了 return decorated.getAttackPower() + 10; &#125; @Override public void fleeBattle() &#123; decorated.fleeBattle(); &#125;&#125; 我们会发现装饰器依旧实现了原接口，因为它不改变结构。大多情况下装饰器会有一个以接口为参数的构造函数，因为它只是对原来的某种实现的一种装饰。适配器是改变接口的，这就是最大的区别。 为什么要把它俩放在一起讲呢？因为在java I/O的实现中使用到了它俩。首先 java I/O 从方向上可分为输入/输出，从数据上可分为byte/char。InputStream和OutputStream对Byte字节流的输入和输出，而Reader和Writer各自占据Char字符流的输入和输出。 装饰器的使用因为java I/O库里有各种各样的组合的实现，如果用继承的话那就太庞大了。Java I/O是由一些原始流(Original Stream)和一些装饰流(Wrapper Stream)组成的。以输入流为类: 原始流处理器 原始流处理器接收一个Byte数组对象，String对象，FileDiscriptor对象或者不同类型的流源对象，原始流处理器包括以下四种： - ByteArrayInputStream：接收一个Byte数组作为流的源。 - FileInputStream:建立一个与文件有关的输入流。接收一个File对象作为流的源。 - PipedInputStream：可以与PipedOutputStream配合使用，用于读入一个数据管道的数据，接收一个PipedOutputStream作为源。 - StringBufferInputStream：将一个字符串缓冲区转换为一个输入流。(废弃) 链接流处理器 所谓链接流处理器，就是可以接收另一个流对象作为源，并对之进行功能扩展的类。InputStream类型的链接处理接收另一个InputStream对象作为流源。 以FilterInputStream过滤输入流的子类为例。它将另一个输入流作为流源。这个类的子类包括以下几种： - BufferedInputStream：用来从硬盘将数据读入到一个内存缓冲区中，并从缓冲区提供数据。 - DataInputStream：提供基于多字节的读取方法，可以读取原始类型的数据。 - LineNumberInputStream：提供带有行计数功能的过滤输入流。 - PushbackInputStream：提供特殊的功能，可以将已经读取的字节“推回”到输入流中。 这里原始流就是被装饰者，装饰流是装饰器，它一般有以原始流为参数的构造函数，并且实现了共有的基类InputStream。 适配器的应用StringBufferInputStream就是一个适配器类，它继承了InputStream，同时持有一个对String的引用，它将String适配成一个InputSteam。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[设计模式系列---创建型模式]]></title>
      <url>%2F2018%2F02%2F12%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[创建型模式简单工厂不多解释，太简单了。就是用一个工厂决定要产生的类。比如Shape是一个基类，它有很多子类Circle，Rectangle，Square。 12345678910111213141516public class ShapeFactory &#123; //使用 getShape 方法获取形状类型的对象 public Shape getShape(String shapeType)&#123; if(shapeType == null)&#123; return null; &#125; if(shapeType.equalsIgnoreCase("CIRCLE"))&#123; return new Circle(); &#125; else if(shapeType.equalsIgnoreCase("RECTANGLE"))&#123; return new Rectangle(); &#125; else if(shapeType.equalsIgnoreCase("SQUARE"))&#123; return new Square(); &#125; return null; &#125;&#125; 缺点明显，加一个子类就要改一下工厂。 抽象工厂一个中心工厂创建其他的工厂。其他的工厂可以理解为一个产品系列，它可以生产很多的产品。优点：因为中心工厂是创建工厂的，所以用户拿到工厂后产生的产品是一个系列的。如下面这个例子：我们有一个王国的工厂接口：KingdomFactory，它可以生产士兵，就是我们说的产品。123public interface KingdomFactory &#123; Army createArmy();&#125; 这时我们对该工厂有两个实现：精灵王国和兽人王国，它们分别生产自己的士兵，它们就是两个系列。123456789101112//这里ElfArmy 和 OrcArmy都是Army的子类public class ElfKingdomFactory implements KingdomFactory &#123; public Army createArmy() &#123; return new ElfArmy(); &#125;&#125;public class OrcKingdomFactory implements KingdomFactory &#123; public Army createArmy() &#123; return new OrcArmy(); &#125;&#125; 中心工厂的核心方法定义如下：12345678910public static KingdomFactory makeFactory(KingdomType type) &#123; switch (type) &#123; case ELF: return new ElfKingdomFactory(); case ORC: return new OrcKingdomFactory(); default: throw new IllegalArgumentException(&quot;KingdomType not supported.&quot;); &#125; &#125; 缺点也很明显：增加产品系列比较麻烦。 建造者模式(builder)这个可以类比JAVA中的StringBuilder。用于对象比较复杂，使用构造函数比较麻烦&amp;难以形象表达。这时可以一步一步的build它。 原型模式(Prototype Pattern)这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。其实就是用来克隆对象的。 单类(Singleton Pattern)保证一个在类在全局中只有一个实例。下面直接讲在java中单类的5中实现方式： 饿汉模式 1234567891011121314151617181920212223242526272829303132333435363738 public final class IvoryTower &#123; /** * 私有构造函数 */ private IvoryTower() &#123;&#125; /** * 静态变量，为该对象 */ private static final IvoryTower INSTANCE = new IvoryTower(); /** * 这里是获取对象的方法。 * @return instance of the singleton. */ public static IvoryTower getInstance() &#123; return INSTANCE; &#125; &#125;``` - 饱汉模式```java public final class ThreadSafeLazyLoadedIvoryTower &#123; private static ThreadSafeLazyLoadedIvoryTower instance; private ThreadSafeLazyLoadedIvoryTower() &#123; // 这里是为了防止反射导致的多个实例的问题 if (instance != null) &#123; throw new IllegalStateException("Already initialized."); &#125; &#125; /** - 唯一实例在第一次调用的时候才会产生。此处使用synchronized字段来防止并发的问题 */ public static synchronized ThreadSafeLazyLoadedIvoryTower getInstance() &#123; if (instance == null) &#123; instance = new ThreadSafeLazyLoadedIvoryTower(); &#125; return instance; &#125; 饿汉模式 123456789101112131415161718192021222324252627282930public final class ThreadSafeDoubleCheckLocking &#123; private static volatile ThreadSafeDoubleCheckLocking instance; /** * 这里是为了防止反射导致的多个实例的问题 */ private ThreadSafeDoubleCheckLocking() &#123; if (instance != null) &#123; throw new IllegalStateException("Already initialized."); &#125; &#125; public static ThreadSafeDoubleCheckLocking getInstance() &#123; // 本地变量能增加25%的效率 // Joshua Bloch "Effective Java, Second Edition", p. 283-284 ThreadSafeDoubleCheckLocking result = instance; // 检查result是否已经创建了，如果是，就返回 if (result == null) &#123; // 虽然没有初始化，但是我哦们不能确定没有别的线程初始化它，所以这是使用排它锁。 synchronized (ThreadSafeDoubleCheckLocking.class) &#123; //再次把实例赋值给本地变量，来看它是否被其他线程初始化。 result = instance; if (result == null) &#123; // 当result依然没有初始化，就直接初始化。这里是线程安全的 // 并且因为实例使用了volatile修饰，所以也不会有指令重排和可见性的问题。 instance = result = new ThreadSafeDoubleCheckLocking(); &#125; &#125; &#125; return result; &#125;&#125; 静态内部类实现 12345678910111213141516//即使饿汉模式加载，又使用了静态内部类的特性保证了只初始化一个对象。public final class InitializingOnDemandHolderIdiom &#123; private InitializingOnDemandHolderIdiom() &#123;&#125; /** */ public static InitializingOnDemandHolderIdiom getInstance() &#123; return HelperHolder.INSTANCE; &#125; /** */ private static class HelperHolder &#123; private static final InitializingOnDemandHolderIdiom INSTANCE = new InitializingOnDemandHolderIdiom(); &#125;&#125; 枚举 12345678//无话可说。。。。public enum EnumIvoryTower &#123; INSTANCE; @Override public String toString() &#123; return getDeclaringClass().getCanonicalName() + "@" + hashCode(); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[spring AOP]]></title>
      <url>%2F2018%2F01%2F13%2Fspring-AOP%2F</url>
      <content type="text"><![CDATA[Spring AOPdemo 链接demo 概念 Aspect(切面): 一个衡切很多class的模块。事物管理就是一个很好的例子。在Spring AOP中，切面由普通的class实现(schema-based approach)或带注解@Aspect的不同class实现。 Join point(连接点):程序执行中的点，如方法的调用或异常的抛出，在Spring AOP中专指程序的调用。 Advice(增强): 切面在特定的切入点执行的动作。类型有:’around’,’before’,’after’。很多AOP框架(包括Spring)把advice已interceptor的形式来实现，管理一个围绕着连接点的interceptors串。 Pointcut(切入点):符合切入条件的连接点。advice是和pointcut表达式相关联的，在连接点符合条件时执行。 Introduction(引入): 将方法和字段添加到被处理的类中。Spring允许你将新的接口(和对应的实现)引入到任何被处理的对象中。比如你可以使任何对象实现IsModified接口来简化缓存。 Target Object(目标对象):被增强的对象。如果AOP框架使用动态代理实现，它也被称为被代理的对象。 AOP proxy(AOP 代理): AOP框架创建的对象，用于实现增强。在Spring Framework中，AOP代理有可能是JDK的动态代理或者是CGLIB代理。 Weaving(植入):链接其他对象或应用创建增强对象的过程。可以在编译期(如:AspectJ compiler)，加载期，或运行期。Spring AOP和其他纯Java AOP框架都是在运行期进行植入的。 advice的类型 Before advice:在join point之前执行增强，它没有中断join point后续执行的能力(除非抛异常) After returning advice:在join point正常执行完后执行增强 After throwing advice:当方法抛出异常的时候执行增强 After(finally) advice:无论join point如何结束都执行增强 Around advice:在方法执行的前后来增强。这种类型的增强是能力最大的，它可以在方法执行的前或后加入自定义的行为。它也可以是否继续执行或直接返回或抛出异常。 Spring AOP的能力和目标Spring AOP是用纯java实现的，不需要其他的特别编译，不用控制类加载机制，所以适合用在servlet容器和应用中。 Spring AOP暂时只支持方法类型join point(建议是spring beans中的方法)。字段interception暂时不支持，虽然它可以在不破坏Spring AOP核心api的基础上添加。如果你想增强字段，可以考虑使用AspectJ。 Spring AOP的实现和其他大多AOP框架不尽相同。它致力于更紧密的结合AOP实现和Spring IoC，而不是提供最完成的AOP实现。 因此Spring AOP通常用于结合Spring IoC。切面可以使用普通的bean的语法。这是Spring AOP和其他AOP最大的不同。当然也有很多事情使用不适合使用Spring AOP，比如增强一个细粒度的对象（例如domain object），这时使用AspectJ是一个更好的选择。 Spring AOP从来不在提供完备的AOP功能上和AspectJ竞争。我相信每种proxy-based框架如Spring AOP和成熟的(type-based)框架如AspectJ都是有价值的。它们的关系应该是互相协作而不是竞争。Spring为了能使所有的AOP用户无缝集成了Spring AOP，IoC和AspectJ。 AOP 代理Spring AOP默认是使用标准的JDK动态代理。它可以代理任意的interface。当Spring AOP需要代理一个类而不是接口时，它也可以使用CGLIB代理。当业务对象没有实现接口的时候默认使用CGLIB。你也可以强制使用CGLIB(希望不要经常这样) 支持@AspectJ注解@AspectJ用来把常规java类标声明为切面。它是在AspectJ 5 release版本被引入的，Spring使用了同样的注解，使用AspectJ提供的库来解析匹配切点。尽管如此AOP用的还是纯的Spring AOP，没有依赖AspectJ的编译或植入。 开启@AspectJSpring可以通过XML或JAVA配置类的方式来支持@AspectJ。但是无论哪种形式，你要首先确保在你项目的类路径里有aspectjweaver.jar这个包 使用JAVA配置类的形式 12345@Configuration@EnableAspectJAutoProxypublic class AppConfig &#123;&#125; 使用XML配置的形式 1&lt;aop:aspectj-autoproxy/&gt; 声明一个aspect在你的程序中的任意一个class，只要以@AspectJ为注解就能被Spring自动检测到称为切面。12345678package org.xyz;import org.aspectj.lang.annotation.Aspect;@Aspect@Componentpublic class NotVeryUsefulAspect &#123;&#125; 切面和其他的类一样可以有方法和字段。它们也可以包含pointcut，advice，introduction。 注意：切面不可再被增强。当class带有@Aspect注解以后，他就不会被auto-proxying了。 声明pointcut回忆一下pointcut决定着对哪个join points感兴趣，因此也控制了增强执行的时机。Spring AOP只支持方法执行的join point，所以你可以认为pointcut就是匹配方法的。一个pointcut声明包含两部分:1.签名包含名字和参数，2.一个pointcut表达式，用来决定感兴趣的方法。在@AspectJ注解风格的AOP中，签名是由一个普通的方法定义提供的，pointcut表达式是包含在注解里的。 为pointcut的方法返回值必须为void 下面这个例子就是一个pointcut，名字为anyOldTransfer，它会匹配所有名为’transfer’的方法12@Pointcut("execution(* transfer(..))")// pointcut表达式private void anyOldTransfer() &#123;&#125;// 签名 pointcut表达式是常规的AspectJ5切点表达式，详情关注:AspectJ Programming Guide 支持的Pointcut选择器 execution - 用于匹配方法执行的join points，这个是Spring AOP主要使用的选择器 within - 匹配在某个特定类型内的join points（在SpringAOP中值在某个类型中的方法） this - 匹配AOP代理是指定类型的实例的所有join points(在SpringAOP中只有方法) target - 匹配目标类型是指定类型的实例的全部join points(在SpringAOP中只有方法) args - 按参数类型匹配 @target - 匹配带有指定注解的类 @args - 匹配运行时参数有指定注解的类 @within - 配置带有指定注解的类型 @annotation - 匹配带有指定注解的方法（因为SpringAOP中join point都是方法） 因为Spring AOP仅针对方法join point，所以上述选择器的定义范围会比AspectJ中的要窄。另外，AspectJ是type-based的语义，所以this和target指向同一个对象(执行该方法的对象)。Spring AOP是proxy-based体系，所以this和target是不同的，this指的是proxy对象，target指的是目标对象。 Spring AOP提供了一个新的pointcut选择器’bean’。它允许你匹配指定名称的spring bean(使用通配符时可以匹配一系列的bean) bean(idOrNameOfBean) 组合pointcut表达式pointcut表达式可以使用&amp;&amp;，|| 和！组合。它们也可以使用名字被引用。1234567891011//匹配所有public方法@Pointcut("execution(public * *(..))")private void anyPublicOperation() &#123;&#125;//匹配在trading下的所有join point@Pointcut("within(com.xyz.someapp.trading..*)")private void inTrading() &#123;&#125;//匹配trading下的所有public方法@Pointcut("anyPublicOperation() &amp;&amp; inTrading()")private void tradingOperation() &#123;&#125; 像上面那样使用简单的名字来标识负责的pointcut表达式是一种很好的习惯。当使用切点的名字来指代表达式时遵循java可见性规则(private只在同一类型可见，protected在继承中可见，public都可见)。可见性不影响切点的匹配。 共享的common切点定义在一个企业级的应用中，建议定义一个SystemArchitecture切面来声明共享的pointcut123456789101112131415161718192021222324252627282930package com.xyz.someapp;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;@Aspectpublic class SystemArchitecture &#123; /** * join point是web层，定义在com.xyz.someapp.web或其子package下的方法 */ @Pointcut("within(com.xyz.someapp.web..*)") public void inWebLayer() &#123;&#125; /** * join point是服务层，定义在com.xyz.someapp.service或其子packege下的方法 */ @Pointcut("within(com.xyz.someapp.service..*)") public void inServiceLayer() &#123;&#125; @Pointcut("within(com.xyz.someapp.dao..*)") public void inDataAccessLayer() &#123;&#125; @Pointcut("execution(* com.xyz.someapp..service.*.*(..))") public void businessService() &#123;&#125; @Pointcut("execution(* com.xyz.someapp.dao.*.*(..))") public void dataAccessOperation() &#123;&#125;&#125; 定义在上述切面中的切点可以在任何地方被访问到。比如想在服务层做一个事物管理，可以这么写:1234567891011&lt;aop:config&gt; &lt;aop:advisor pointcut="com.xyz.someapp.SystemArchitecture.businessService()" advice-ref="tx-advice"/&gt;&lt;/aop:config&gt;&lt;tx:advice id="tx-advice"&gt; &lt;tx:attributes&gt; &lt;tx:method name="*" propagation="REQUIRED"/&gt; &lt;/tx:attributes&gt;&lt;/tx:advice&gt; &lt;aop:config&gt; 和 &lt;aop:advisor&gt;元素，transaction元素会在后面讲到。 举例Spring AOP用户最常用的就是execution切点选择器。格式如下: execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern?) 上面例子中，除了ret-type-pattern,name-pattern,param-pattern外其余都是可选的。你经会用来表示return type，它可以匹配所以返回类型。name-pattern用来匹配方法名。param-pattern稍微有点复杂:()匹配无参数,(..)匹配任意数量的参数(0或很多),(\)表示有一个任意类型的参数,(*,String)匹配两个参数，第一个是任意类型，第二个是String。 下面看一些常见的例子: 所有public方法 execution(public (..)) 所有已set开头的方法 execution( set(..)) 所有AccountService接口里的方法 execution( com.xyz.service.AccountService.(..)) 所有定义在service包下的方法 execution( com.xyz.service.\.*(..)) 所有service包和其子包的方法 execution( com.xyz.service..\.*(..)) 在service包下的所有join point(在Spring AOP中只有方法) within(com.xyz.service.*) 在service包及其子包下的所有join point(在Spring AOP中只有方法) within(com.xyz.service..*) 所有代理实现AccountService接口的join point this(com.xyz.service.AccountService) 所有目标对象实现AccountService接口的 target(com.xyz.service.AccountService) 匹配一个参数，并且运行时参数实现Serializable args(java.io.Serializable)注意：改切点和execution( (java.io.Serializable))是不同的，args匹配运行时传入的是Serializable的，execution匹配的是声明为Serializable的 目标对象有@Transaction注解 @target(org.springframework.transaction.annotation.Transactional) 对象声明了@Transaction注解 @within(org.springframework.transaction.annotation.Transactional) 方法有@Transaction注解 @annotation(org.springframework.transaction.annotation.Transactional) 方法带有一个参数，并且运行时传入的参数带有@Classified注解 @args(com.xyz.security.Classified) Spring bean名为tradeService的所有方法 bean(tradeService) 所有匹配通配符表达式的bean的方法 bean(*Service) 写一个好的切点在编译期AspectJ会处理pointcuts来优化它的匹配效率。测试代码然后确认那些joint point(静态或动态)匹配给定的pointcuts是一个耗时的过程。动态匹配意味着匹配不能再静态分析的时候完全确定。当第一次遇到一个pointcut时，AspectJ会把它写入一个用于匹配的优化的表里。这意味着什么？简单来说pointcuts被重写在DNF(disjunctive normal form)中，pointcuts中的部分被分别存储，然后那些检测起来容易的部分会先检测。这就意味着你不必操心每一种pointcut选择器的性能，你只需要一个个的声明它们就行。尽管如此，AspectJ也只能做到这些了，为了更加优化匹配效率你应该思考这些选择器的目的是什么，然后尽可能的缩小选择的范围。目前选择期可以分为三大类:kinded,scoping,context。 kinded:选择某一个特定类型的join point。比如:execution,get,set,call,handler。 scoping:选择一组join point。比如:within，wihtincode contextual:依赖上下文来选择的。比如:this,target,@annotation 一个好的pointcut最好能至少包含前两种类型(kinded,scoping),当然在有些情况下contextual选择器还是需需要用的。仅仅提供kinded或contextual选择器可能会因为额外的处理和分析而导致影响植入效率(时间和内存使用上)。scoping选择器可以很快的匹配，并且用了它可以很快的去除很多不用分析的join point，这就是一个好的joint point最好能有一个它。 声明adviceadvice和切点表达式是相关的。它会在匹配切点的方法执行的前，后，或上下来执行。pointcut表达式可以被简单的以名字来引用或直接写到括号里。 Before adviceBefore advice就是使用@Before声明在切面里的方法 123456789101112131415161718import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;@Aspectpublic class BeforeExample &#123; @Before("com.xyz.myapp.SystemArchitecture.dataAccessOperation()") public void doAccessCheck() &#123; // ... &#125; //使用切点表达式 @Before("execution(* com.xyz.myapp.dao.*.*(..))") public void doAccessCheck() &#123; // ... &#125;&#125; After returning advice 1234567891011121314151617181920import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.AfterReturning;@Aspectpublic class AfterReturningExample &#123; @AfterReturning("com.xyz.myapp.SystemArchitecture.dataAccessOperation()") public void doAccessCheck() &#123; // ... &#125; //当你需要方法的返回值的时候 //这时参数值必须和returning属性值一致。 @AfterReturning( pointcut="com.xyz.myapp.SystemArchitecture.dataAccessOperation()", returning="retVal") public void doAccessCheck(Object retVal) &#123; // ... &#125;&#125; After throwing在匹配方法抛出异常是执行 1234567891011121314151617181920import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.AfterThrowing;@Aspectpublic class AfterThrowingExample &#123; @AfterThrowing("com.xyz.myapp.SystemArchitecture.dataAccessOperation()") public void doRecoveryActions() &#123; // ... &#125; //指定异常 @AfterThrowing( pointcut="com.xyz.myapp.SystemArchitecture.dataAccessOperation()", throwing="ex") public void doRecoveryActions(DataAccessException ex) &#123; // ... &#125;&#125; After (finally) advice处理正常或异常情况，典型的用法是释放资源 123456789101112import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.After;@Aspectpublic class AfterFinallyExample &#123; @After("com.xyz.myapp.SystemArchitecture.dataAccessOperation()") public void doReleaseLock() &#123; // ... &#125;&#125; Around advice这时最后一个类型的增强。他可以在方法的前后执行，并且能够决何时，如何执行方法。Around advice常常用于需要在方法执行前后共享状态。Around 增强的注解为@Around。它的第一个参数一定要是ProceedingJoinPoint类型的。在增强的方法体里，调用ProceedingJoinPoint的proceed()方法来使剩下的方法执行。proceed方法还可以参入一个Object[]的参数，这个是方法执行的参数。 12345678910111213141516import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.ProceedingJoinPoint;@Aspectpublic class AroundExample &#123; @Around("com.xyz.myapp.SystemArchitecture.businessService()") public Object doBasicProfiling(ProceedingJoinPoint pjp) throws Throwable &#123; // start stopwatch Object retVal = pjp.proceed(); // stop stopwatch return retVal; &#125;&#125; Advice parametersSpring提供了全部类型的advice，这意味着你可以在advice签名中声明你需要的参数(向我们上面的returning和throwing一样)而不是一直用Object[]。下面我们会看到如何在advice中使用参数和上下文。首先我们看一下如何写一个通用的advice来发现当前被增强的方法。 访问当前join point每一个增强的第一个参数都可以是org.aspectj.lang.JoinPoint(注意around advice的第一个参数是ProceedingJoinPoint，它是JoinPoint的子类。) 向advice传递参数我们已经看到如何绑定返回值和异常值到advice。要想绑定参数值，你可以用args。如果参数名代替类型出现在args表达式中，当advice触发时对应参数的值就会传入到该增强中。看下面一个例子。假设你想增强dao的执行，并且希望Account对象为第一个参数，你还想再advice体中访问这个参数。你可以写成下面形式: 1234@Before("com.xyz.myapp.SystemArchitecture.dataAccessOperation() &amp;&amp; args(account,..)")public void validateAccount(Account account) &#123; // ...&#125; arg(account,..)有两个意图:第一，它限制匹配至少一个参数，并且参数是Account实例；第二，它使advice可以通过account参数来访问实际的Account参数。另一种写法就是声明一个切点，提供Account对象。此时advice只需要引用这个切点名就行了。1234567@Pointcut("com.xyz.myapp.SystemArchitecture.dataAccessOperation() &amp;&amp; args(account,..)")private void accountDataAccessOperation(Account account) &#123;&#125;@Before("accountDataAccessOperation(account)")public void validateAccount(Account account) &#123; // ...&#125; 代理对象(this),目标对象(target),注解(@within,@target,@annotation,@args)也可以用类似的方式绑定。下面一个例子展示和如何匹配@Auditable注解和怎么抽取数据。 首先定义@Auditable注解12345@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.METHOD)public @interface Auditable &#123; AuditCode value();&#125; 接着定义advice(增强)来匹配@Auditable方法:12345@Before("com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; @annotation(auditable)")public void audit(Auditable auditable) &#123; AuditCode code = auditable.value(); // ...&#125; Advice泛型参数Spring AOP可以处理泛型类和方法。假设你有一个泛型类如下:1234public interface Sample&lt;T&gt; &#123; void sampleGenericMethod(T param); void sampleGenericCollectionMethod(Collection&lt;T&gt; param);&#125; 使用advice参数，你可以限制拦截的方法的参数1234@Before("execution(* ..Sample+.sampleGenericMethod(*)) &amp;&amp; args(param)")public void beforeSampleMethod(MyType param) &#123; // Advice implementation&#125; 上述方法不能用在泛型集合上。比如下面这种写法就是错的！1234@Before("execution(* ..Sample+.sampleGenericCollectionMethod(*)) &amp;&amp; args(param)")public void beforeSampleMethod(Collection&lt;MyType&gt; param) &#123; // Advice implementation&#125; 为了使上面工作，我们必须检查集合中的每一个元素，这个是不合理的就像在泛型中出现null一样。为了达到类似的效果，你可以使用参数Collection&lt;?&gt;，然后手动的一个个的检查参数类型。 决定参数名字advice触发时的参数依赖于pointcut表达式中的参数名和声明在(advice和pointcut)方法签名中参数名的匹配。但是参数名在java反射中是无法获取的，所以Spring AOP用了下面机制来确定方法名。 用户显示声明参数值，advice和pointcut注解都有一个可选的”argNames”属性，这些参数运行时可用。比如 123456@Before(value="com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; target(bean) &amp;&amp; @annotation(auditable)", argNames="bean,auditable")public void audit(Object bean, Auditable auditable) &#123; AuditCode code = auditable.value(); // ... use code and bean&#125; 如果第一个参数是JoinPoint, ProceedingJoinPoint, 或 JoinPoint.StaticPart类型，你可以在argNames属性中省略改名字。比如如果上面的例子接收一个join point对象。 123456@Before(value="com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; target(bean) &amp;&amp; @annotation(auditable)", argNames="bean,auditable")public void audit(JoinPoint jp, Object bean, Auditable auditable) &#123; AuditCode code = auditable.value(); // ... use code, bean, and jp&#125; 这种方式对那些不需要其他join point上下文的增强特别方便，就不必写argNames属性了。 使用’argNames’属性有点笨拙，所以如果’argNames’属性没有声明，Spring AOP会看debug信息，从本地变量表中决定参数名称。这个信息只要class编译时加参数’-g:vars’就可以了。加这个参数会有如下3个影响:(1)你的代码会更容易理解。(2)class文件会稍微大点。(3)去除无用本地变量的优化将不会开启。总而言之，这个对你没啥影响。 如果@AspectJ被AspectJ编译器(ajc)编译，这不需要debug information。 如果代码编译没有debug信息，Spring AOP会尝试着推断(比如，如果切点表达式只有一个参数，增强方法也只有一个参数，显然就是它)。如果参数绑定是模棱两可的，者会抛出AmbiguousBindingException异常。 如果上述机制全都失败，者会抛出IllegalArgumentException异常。 Advice顺序当一个join point有多个advice时会有什么情况？SpringAOP和AspectJ使用的优先级顺序实现同的。在进入时高优先级的先执行，在离开时高优先级的后执行。当两个advice定义在不同的aspects中并且增强同一个join point，除非你标明顺序，否则他们的执行顺序是不定的。你可以控制执行顺序。使用Spring的org.springframework.core.Ordered接口或Order注解即可完成。两个aspects，Ordered.getValue()或注解值返回值小的优先级高。当两个advice定义在同一个aspects中并且增强同一个join point，顺序是无法确定的(因为java反射无法确认声明顺序)。所以在同一个aspect类中，对同一个join point的增强最好放在同一个方法中，或者把它们重构到不同的aspect方法中。 引入 引入(在AspectJ中成为inter-type声明)赋予aspect给被加强对象指定一个接口并提供接口实现的能力。 引入是由@DeclareParents注解定义的。这个注解用来声明匹配的类型有一个新的parent。例如：现在有个接口UsageTracked，实现为DefaultUsageTracked，下面的的aspect声明全部service下的类也实现了UsageTracked接口。 123456789101112@Aspectpublic class UsageTracking &#123; @DeclareParents(value="com.xzy.myapp.service.*+", defaultImpl=DefaultUsageTracked.class) public static UsageTracked mixin; @Before("com.xyz.myapp.SystemArchitecture.businessService() &amp;&amp; this(usageTracked)") public void recordUsage(UsageTracked usageTracked) &#123; usageTracked.incrementUseCount(); &#125;&#125; 上面的例子中，所有匹配的类型都会实现UsageTracked接口。这时service bean可以像UsageTracked接口一样使用。如果你想访问它可以写成下面这样: UsageTracked usageTracked = (UsageTracked) context.getBean(“myService”); aspect(切面)的实例化模型 默认情况下在应用上下文中每个切面只有一个实例。AspectJ称之为单类模型。aspect可以声明别的声明周期:Spring支持prethis和pretarget。(percflow,percflowbelow,pertypewithin 暂时还不支持) 下面看一个prethis的例子。 123456789101112@Aspect("perthis(com.xyz.myapp.SystemArchitecture.businessService())")public class MyAspect &#123; private int someState; @Before(com.xyz.myapp.SystemArchitecture.businessService()) public void recordServiceUsage() &#123; // ... &#125;&#125; prethis会为每一个执行business服务的对象(AOP对象)创建一个aspect实例。 该实例会在服务对象调用方法是创建。当服务对象离开作用域时，切面对象也会一起离开作用域。在切面对象创建之前，增强不会被执行。 pretarget类似，只是它为每一个目标对象创建一个切面实例。 举例 很多业务服务可能会因为高并发失败。并且这些业务重试可以很快成功。对于这种适合重试的业务(幂等操作不需要反馈给用户)，我们选择透明的重试而不让用户看到PessimisticLocking FailureException异常。 因为我们需要重试操作，所以我们需要使用around增强。12345678910111213141516171819202122232425262728293031323334353637@Aspectpublic class ConcurrentOperationExecutor implements Ordered &#123; private static final int DEFAULT_MAX_RETRIES = 2; private int maxRetries = DEFAULT_MAX_RETRIES; private int order = 1; public void setMaxRetries(int maxRetries) &#123; this.maxRetries = maxRetries; &#125; public int getOrder() &#123; return this.order; &#125; public void setOrder(int order) &#123; this.order = order; &#125; @Around("com.xyz.myapp.SystemArchitecture.businessService()") public Object doConcurrentOperation(ProceedingJoinPoint pjp) throws Throwable &#123; int numAttempts = 0; PessimisticLockingFailureException lockFailureException; do &#123; numAttempts++; try &#123; return pjp.proceed(); &#125; catch(PessimisticLockingFailureException ex) &#123; lockFailureException = ex; &#125; &#125; while(numAttempts &lt;= this.maxRetries); throw lockFailureException; &#125;&#125; 注意这个切面实现了Ordered接口，所以为我们可以让他的优先级高于transaction增强(我们希望每次都是一个新的事物)。maxRetries和order都可以被配置。 对应的Spring配置:123456&lt;aop:aspectj-autoproxy/&gt;&lt;bean id="concurrentOperationExecutor" class="com.xyz.myapp.service.impl.ConcurrentOperationExecutor"&gt; &lt;property name="maxRetries" value="3"/&gt; &lt;property name="order" value="100"/&gt;&lt;/bean&gt; 为了使切面只重试幂等操作，我们需要定义一个Idempotent注解:1234@Retention(RetentionPolicy.RUNTIME)public @interface Idempotent &#123; // marker annotation&#125; 然后使用annotation修改上面的切面，然他只匹配@Idempotent操作。12345@Around("com.xyz.myapp.SystemArchitecture.businessService() &amp;&amp; " + "@annotation(com.xyz.myapp.service.Idempotent)")public Object doConcurrentOperation(ProceedingJoinPoint pjp) throws Throwable &#123; ...&#125; 基于XML的AOP Spring提供了”aop”命名空间。它支持和@AspectJ相同的切点表达式和增强类型。为了使用aop命名空间，你需要在XML配置中加入spring-aop schema:1234567&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt; &lt;!-- bean definitions here --&gt;&lt;/beans&gt; 在Spring配置中，所有的切面相关的元素信息都要放在&lt;aop:config&gt;中(在上下文中可以声明多个&lt;aop:config&gt;)。一个&lt;aop:config&gt;中可以包含pointcut，advisor，aspect元素(注意这些必须按照上面的顺序声明) &lt;aop:config&gt;样式的配置严重依赖Spring的auto-proxy机制。如果你使用诸如BeanNameAutoProxyCreator的方式显示的auto-proxy就会出现问题。所以建议是要么全部使用xml或注解。 声明一个切面 使用配置的aspect就是一个在应用上下文上定义的一个普通java对象。他的状态和行为是对象的域和方法决定的，pointcut和advice信息是xml配置确定的。 一个切面使用&lt;aop:config&gt;定义的，它背后的bean是靠ref属性引用的。123456789&lt;aop:config&gt; &lt;aop:aspect id="myAspect" ref="aBean"&gt; ... &lt;/aop:aspect&gt;&lt;/aop:config&gt;&lt;bean id="aBean" class="..."&gt; ...&lt;/bean&gt; 声明pointcut 可以在&lt;aop:config&gt;中声明一个有名字的pointcut，这样它就可以在多个切面中共享。 例如下面这个切点用于所有service层。123456&lt;aop:config&gt; &lt;aop:pointcut id="businessService" expression="execution(* com.xyz.myapp.service.*.*(..))"/&gt;&lt;/aop:config&gt; xml中的切点表达式和@AspectJ中的一样。如果你使用xml形式的配置，你可以引用在@Aspects中定义的切点所以当你有一个SystemArchitecture的切面时,上面的切点定义就可以写成下面这样:123456&lt;aop:config&gt; &lt;aop:pointcut id="businessService" expression="com.xyz.myapp.SystemArchitecture.businessService()"/&gt;&lt;/aop:config&gt; 在切面中定义切点和在顶层定义一样:123456789101112&lt;aop:config&gt; &lt;aop:aspect id="myAspect" ref="aBean"&gt; &lt;aop:pointcut id="businessService" expression="execution(* com.xyz.myapp.service.*.*(..))"/&gt; ... &lt;/aop:aspect&gt;&lt;/aop:config&gt; 和@AspectJ一样，基于xml配置的切点也可以获取join point上线问。比如下面这个切点就获取join point的’this’对象，然后传递给advice:12345678&lt;aop:config&gt; &lt;aop:aspect id="myAspect" ref="aBean"&gt; &lt;aop:pointcut id="businessService" expression="execution(* com.xyz.myapp.service.*.*(..)) &amp;amp;&amp;amp; this(service)"/&gt; &lt;aop:before pointcut-ref="businessService" method="monitor"/&gt; ... &lt;/aop:aspect&gt;&lt;/aop:config&gt; 此时advice必须可以接收这个参数：123public void monitor(Object service) &#123; ...&#125; 显然上面在xml中使用’&amp;&amp;‘是很笨拙的，所以可以用’and’,’or’和’not’来代替’&amp;&amp;’,’||’,’!’。所以上面就可以写成:123456789101112&lt;aop:config&gt; &lt;aop:aspect id="myAspect" ref="aBean"&gt; &lt;aop:pointcut id="businessService" expression="execution(* com.xyz.myapp.service.*.*(..)) **and** this(service)"/&gt; &lt;aop:before pointcut-ref="businessService" method="monitor"/&gt; ... &lt;/aop:aspect&gt;&lt;/aop:config&gt; 注意这种方式定义的切点是通过XML id来引用，所以不能使用名字来组成合成切点。 因此基于xml配置的有名切点比@AspectJ方式的多了一些限制。 声明增强(advice)xml配置支持@AspectJ风格的全部advice，而且他们的语义也基本相同。 before advice在匹配方法之前执行。它用&lt;aop:before&gt;元素始声明在&lt;aop:aspect&gt;中,这里dataAccessOperation是一个切点的id。也可以直接把切点内嵌在增强中。 12345678910&lt;aop:aspect id="beforeExample" ref="aBean"&gt; &lt;aop:before pointcut-ref="dataAccessOperation" method="doAccessCheck"/&gt; ... &lt;!-- 切点内嵌 --&gt; &lt;aop:before pointcut="execution(* com.xyz.myapp.dao.*.*(..))" method="doAccessCheck"/&gt;&lt;/aop:aspect&gt; method属性中定义的doAccessCheck方法提供了增强的实现。该方法必须定义在aspect bean中。 after returning adviceafter returning advice在匹配方法正常完成时执行。 123456789101112&lt;aop:aspect id="afterReturningExample" ref="aBean"&gt; &lt;aop:after-returning pointcut-ref="dataAccessOperation" method="doAccessCheck"/&gt; ... &lt;!-- 如果想要获得返回值 --&gt; &lt;aop:after-returning pointcut-ref="dataAccessOperation" returning="retVal" method="doAccessCheck"/&gt;&lt;/aop:aspect&gt; 在doAccessCheck方法中必须声明一个名为retVal的参数。这个参数的匹配规则和@AfterReturning是一样的。 1public void doAccessCheck(Object retVal) &#123;... After throwing advice当匹配方法抛出异常是执行 12345678910111213&lt;aop:aspect id="afterThrowingExample" ref="aBean"&gt;&lt;aop:after-throwing pointcut-ref="dataAccessOperation" method="doRecoveryActions"/&gt;...&lt;!-- 获取抛出异常 --&gt;&lt;aop:after-throwing pointcut-ref="dataAccessOperation" throwing="dataAccessEx" method="doRecoveryActions"/&gt;...&lt;/aop:aspect&gt; 同上，增强方法也需要有dataAccessEx参数。 1public void doRecoveryActions(DataAccessException dataAccessEx) &#123;... Around advicearound advice使用aop:around元素声明。第一个参数是ProceedingJoinPoint类型的。在advice方法中调用ProceedingJoinPoint的proceed()方法来触发后续的方法执行。proceed方法可以接收Object[]参数。 123456&lt;aop:aspect id="aroundExample" ref="aBean"&gt; &lt;aop:around pointcut-ref="businessService" method="doBasicProfiling"/&gt; ...&lt;/aop:aspect&gt; doBasicProfiling方法的实现和@AspectJ例子中方法实现一样。123456public Object doBasicProfiling(ProceedingJoinPoint pjp) throws Throwable &#123; // start stopwatch Object retVal = pjp.proceed(); // stop stopwatch return retVal;&#125; advice 参数xml模式的注解对注解参数的支持和@AspectJ一样。它使用arg-names属性来代替argNames。 12345&lt;aop:beforepointcut="com.xyz.lib.Pointcuts.anyPublicMethod() and @annotation(auditable)"method="audit"arg-names="auditable"/&gt;&lt;!-- arg-names支持以逗号分隔的方式声明一些列参数 --&gt; 下面的例子展示了一个接收多个不同类型的参数的around增强。 123456789package x.y.service;public interface FooService &#123; Foo getFoo(String fooName, int age);&#125;public class DefaultFooService implements FooService &#123; public Foo getFoo(String name, int age) &#123; return new Foo(name, age); &#125;&#125; 下一步定义切面，注意增强方法profile(..)接收一系列不同类型的参数，但是第一个参数要是join point。1234567891011121314151617package x.y;import org.aspectj.lang.ProceedingJoinPoint;import org.springframework.util.StopWatch;public class SimpleProfiler &#123; public Object profile(ProceedingJoinPoint call, String name, int age) throws Throwable &#123; StopWatch clock = new StopWatch("Profiling for '" + name + "' and '" + age + "'"); try &#123; clock.start(call.toShortString()); return call.proceed(); &#125; finally &#123; clock.stop(); System.out.println(clock.prettyPrint()); &#125; &#125;&#125; 最后，这里是对应的xml配置: 123456789101112131415161718192021&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt; &lt;!-- this is the object that will be proxied by Spring's AOP infrastructure --&gt; &lt;bean id="fooService" class="x.y.service.DefaultFooService"/&gt; &lt;!-- this is the actual advice itself --&gt; &lt;bean id="profiler" class="x.y.SimpleProfiler"/&gt; &lt;aop:config&gt; &lt;aop:aspect ref="profiler"&gt; &lt;aop:pointcut id="theExecutionOfSomeFooServiceMethod" expression="execution(* x.y.service.FooService.getFoo(String,int)) and args(name, age)"/&gt; &lt;aop:around pointcut-ref="theExecutionOfSomeFooServiceMethod" method="profile"/&gt; &lt;/aop:aspect&gt; &lt;/aop:config&gt;&lt;/beans&gt; 如果你按照上述方法配置，这下面代码会在标准输出中输出:12345678910111213141516 import org.springframework.beans.factory.BeanFactory; import org.springframework.context.support.ClassPathXmlApplicationContext; import x.y.service.FooService; public final class Boot &#123; public static void main(final String[] args) throws Exception &#123; BeanFactory ctx = new ClassPathXmlApplicationContext("x/y/plain.xml"); FooService foo = (FooService) ctx.getBean("fooService"); foo.getFoo("Pengo", 12); &#125; &#125; // output: // StopWatch 'Profiling for 'Pengo' and '12'': running time (millis) = 0// -----------------------------------------// ms % Task name// -----------------------------------------// 00000 ? execution(getFoo) Advice 顺序参见@AspectJ Introductionsintroduction赋予aspect给被增强对象声明实现接口的能力，并未其提供实现。它有aop:aspect中的aop:declare元素实现，它用来给匹配类型声明父类。比如，给定一个接口UsageTracked和它的实现DefaultUsageTracked，下面切面声明了全部的service接口都实现了UsageTraced接口。12345678910111213&lt;aop:aspect id="usageTrackerAspect" ref="usageTracking"&gt; &lt;aop:declare-parents types-matching="com.xzy.myapp.service.*+" implement-interface="com.xyz.myapp.service.tracking.UsageTracked" default-impl="com.xyz.myapp.service.tracking.DefaultUsageTracked"/&gt; &lt;aop:before pointcut="com.xyz.myapp.SystemArchitecture.businessService() and this(usageTracked)" method="recordUsage"/&gt;&lt;/aop:aspect&gt; 和@AspectJ类似 Aspect instantiation modelsxml模式只支持singleton模型。 Advisorsadvisors这个概念是Spring AOP引入的，在AspectJ中并没有对等的概念。一个advisor像一个自包含的只有个一增强的aspect。这个增强自身就是一个bean，它必须实现advice type in spring中的任意一个接口。 Spring通过&lt;aop:advisor&gt;元素来支持advisor。它经常用于transaction增强:123456789101112&lt;aop:config&gt;&lt;aop:pointcut id="businessService" expression="execution(* com.xyz.myapp.service.*.*(..))"/&gt;&lt;aop:advisor pointcut-ref="businessService" advice-ref="tx-advice"/&gt;&lt;/aop:config&gt;&lt;tx:advice id="tx-advice"&gt; &lt;tx:attributes&gt; &lt;tx:method name="*" propagation="REQUIRED"/&gt; &lt;/tx:attributes&gt;&lt;/tx:advice&gt; 你也可以用pointcut属性来替换上面的pointcut-ref属性。advisor也可以通过order属性来控制执行优先级。 选择哪种风格的AOP更适合Spring AOP or Full AspectJ能满足需求，越简单越好！Spring AOP比完整的AspectJ要简单的多，它不需要在你的开发和构建过程中引入AspectJ的编译/植入。如果你只需要增强你的Spring bean的功能，Spring AOP是一个好的选择。如果你不仅仅需要增强Spring容器中的对象(domain对象)，或者当你希望出方法之外的其他类型的join point时，你就需要使用AspectJ。 当使用AspectJ时，你可以选择AspectJ语法(也就是code style)或@AspectJ风格。如果你用的java版本小于java 5，那你只能用code style了。如果切面在你系统的比例非常大，并且你可以在eclipse里使用AspectJ Development Tools (AJDT)插件，这时悬着AspectJ语法是对的选择。如果你没有使用eclipse或切面在你的系统中只是很小的一部分，那么这时使用@AspectJ风格，然后在构建脚本中添加切面的植入过程就可以了。 @AspectJ or XML当你选择使用SpringAOP时，选择@AspectJ还是XML风格就有很多事情需要考虑了。当你用AOP来配置企业级服务的时候，XML是一个好的选择。你可以很好的控制切面的可见性。但是XML风格有两个缺点。第一，切面的实现没有封闭在一个地方，这个违背了DRY原则。第二，XML风格对比与@AspectJ稍微有更多的限制，比如XML只支持singleton的切面，它也不能使用切点的名字来组合切点（因为切点是以id声明的），例如使用@AspectJ你可以这么写:12345678@Pointcut(execution(* get*()))public void propertyAccess() &#123;&#125;@Pointcut(execution(org.xyz.Account+ *(..))public void operationReturningAnAccount() &#123;&#125;@Pointcut(propertyAccess() &amp;&amp; operationReturningAnAccount())public void accountPropertyAccess() &#123;&#125; 使用XML，你只能声明前两个：12345&lt;aop:pointcut id="propertyAccess" expression="execution(* get*())"/&gt;&lt;aop:pointcut id="operationReturningAnAccount" expression="execution(org.xyz.Account+ *(..))"/&gt; @AspectJ还有个优点是它可以被Spring AOP和AspectJ识别。 代理机制Spring AOP使用JDK的动态代理或CGLIB来给目标对象创建代理(无论何时JDK的动态代理是首选的)只要目标对象实现了一个接口，就会使用JDK的动态代理。目标对象对接口的所有实现都会被代理。如果目标对象没有实现任何接口就会使用CGLIB代理。 如果你想强制使用CGLIB代理(比如，你想代理目标对象的全部方法而不仅仅是接口中的)，但是你要注意下列问题: 方法无法增强，因为他们不能重载 Spring 3.2不需要在classpath中加入CGLIB了，因为CGLIB已经被打包到spring-core jar里了。这就意味着基于CGLIB的代理和JDk的动态代理在使用上并无不同了。 Spring 4.0你的被代理对象的构造函数不会再被调用两次了，因为CGLIB代理将通过Objenesis来创建对象。但是如果你的JVM不允许绕开构造器，你就会看到两次构造函数的调用和对应的日志。可以通过设置&lt;aop:config&gt;元素的proxy-target-class标签来强制使用CGLIB代理。123&lt;aop:config proxy-target-class="true"&gt;&lt;!-- other beans defined here... --&gt;&lt;/aop:config&gt; 当使用@AspectJ的autoproxy支持时，如果想强制使用CGLIB代理，者需要设置&lt;aop:aspectj-autoproxy&gt;元素的proxy-target-class标签：1&lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt; 理解AOP代理Spring AOP是基于代理的。理解这点非常重要。看下面这个场景：123456789public class SimplePojo implements Pojo &#123; public void foo() &#123; // this next method invocation is a direct call on the 'this' reference this.bar(); &#125; public void bar() &#123; // some logic... &#125;&#125; 如果你在一个对象引用上调用方法，这个方法调用会直接作用到方法上，如下:12345678910public class Main &#123; public static void main(String[] args) &#123; Pojo pojo = new SimplePojo(); // this is a direct method call on the 'pojo' reference pojo.foo(); &#125;&#125; 但是当引用是代理的时候，事情就会有所不同。 1234567891011121314public class Main &#123; public static void main(String[] args) &#123; ProxyFactory factory = new ProxyFactory(new SimplePojo()); factory.addInterface(Pojo.class); factory.addAdvice(new RetryAdvice()); Pojo pojo = (Pojo) factory.getProxy(); // this is a method call on the proxy! pojo.foo(); &#125;&#125; 理解这里的关键是main方法中对foo()的调用是通过proxy的，它意味着代理能够调用所有和该方法关联的增强。但是一旦方法最终到达了目标对象，在本例中就是SimplePojo，任何方法调用他都只会调用自身的，比如this.bar()或this.foo()，会使用this引用而不是proxy。这个非常重要，它意味着自身引用就无法执行增强。 我们怎么解决它呢？最好的解决办法是让你的代码中不包含自引用。这可能会增加一点你的工作量，但是这种方法是最好的，侵入性最小的。1234567891011public class SimplePojo implements Pojo &#123; public void foo() &#123; // this works, but... gah! ((Pojo) AopContext.currentProxy()).bar(); &#125; public void bar() &#123; // some logic... &#125;&#125; 它使你的代码和Spring AOP耦合了，而且让class对自己正在使用AOP有感知。并且它还需要创建代理的时候做一些特别的配置:12345678910111213141516public class Main &#123; public static void main(String[] args) &#123; ProxyFactory factory = new ProxyFactory(new SimplePojo()); factory.adddInterface(Pojo.class); factory.addAdvice(new RetryAdvice()); //这里是新加入的配置。。。 factory.setExposeProxy(true); Pojo pojo = (Pojo) factory.getProxy(); // this is a method call on the proxy! pojo.foo(); &#125;&#125; 最后，请记住在AspectJ中不存在这种自引用的问题，因为AspectJ不是基于proxy的AOP框架。 以编码方式创建@AspectJ代理除了使用&lt;aop:config&gt;或&lt;aop:aspectj-autoproxy&gt;配置来声明切面以外，也可以用编码的形式为目标对象创建代理。下面我们关注如何使用@AspectJ切面自动的创建代理。 org.springframework.aop.aspectj.annotation.AspectJProxyFactory可以用来为那些被一个或多个@AspectJ切面增强的目标对象创建代理。这个类的用法十分简单。123456789101112// create a factory that can generate a proxy for the given target objectAspectJProxyFactory factory = new AspectJProxyFactory(targetObject);// add an aspect, the class must be an @AspectJ aspect// you can call this as many times as you need with different aspectsfactory.addAspect(SecurityManager.class);// you can also add existing aspect instances, the type of the object supplied must be an @AspectJ aspectfactory.addAspect(usageTracker);// now get the proxy object...MyInterfaceType proxy = factory.getProxy();]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[spring XML extensions]]></title>
      <url>%2F2017%2F11%2F19%2Fspring-XML-extensions%2F</url>
      <content type="text"><![CDATA[背景最近看dubbo源码，其中使用spring加载配置的时候用到了自定义xml标签的功能。所以就看了一下。其实从spring2.0开始就已经有该功能了。 步骤其实自定义xml标签十分简单，只需要一下四步 描述自定义元素的xml schema NamespaceHandler BeanDefinitionParse 在spring上注册上面这些元素 编写xml schema创建文件myns.xsd123456789101112131415161718192021&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsd:schema xmlns="http://www.mycompany.com/schema/myns" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:beans="http://www.springframework.org/schema/beans" targetNamespace="http://www.mycompany.com/schema/myns" elementFormDefault="qualified" attributeFormDefault="unqualified"&gt; &lt;xsd:import namespace="http://www.springframework.org/schema/beans"/&gt; &lt;xsd:element name="dateformat"&gt; &lt;xsd:complexType&gt; &lt;xsd:complexContent&gt; &lt;xsd:extension base="beans:identifiedType"&gt; &lt;xsd:attribute name="lenient" type="xsd:boolean"/&gt; &lt;xsd:attribute name="pattern" type="xsd:string" use="required"/&gt; &lt;/xsd:extension&gt; &lt;/xsd:complexContent&gt; &lt;/xsd:complexType&gt; &lt;/xsd:element&gt;&lt;/xsd:schema&gt; 具体语法 NamespaceHandler用于解析我们上面定义的命名空间常规用法为每一个顶级的xml元素定义一个bean definition，比如上面的xml schema中dateformat就对应一个bean definition12345678910111213package org.springframework.samples.xml;import org.springframework.beans.factory.xml.NamespaceHandlerSupport;public class MyNamespaceHandler extends NamespaceHandlerSupport &#123; //在handler被调用前调用 public void init() &#123; //此处为xml顶级元素dateformat注册了一个bean definition registerBeanDefinitionParser("dateformat", new SimpleDateFormatBeanDefinitionParser()); &#125;&#125; 在这个例子中NamespaceHandler中并没有太多逻辑，它其实就是一个分发作用，可以在其上注册很多的bean definition，对应每一个自定义标签。具体的处理逻辑在bean definition中。 BeanDefinitionParseBeanDefinitionParse用于解析一个自定义schema中单独的顶级xml元素。123456789101112131415161718192021222324252627282930package org.springframework.samples.xml;import org.springframework.beans.factory.support.BeanDefinitionBuilder;import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;import org.springframework.util.StringUtils;import org.w3c.dom.Element;import java.text.SimpleDateFormat;public class SimpleDateFormatBeanDefinitionParser extends AbstractSingleBeanDefinitionParser &#123; //解析后的目标class protected Class getBeanClass(Element element) &#123; return SimpleDateFormat.class; &#125; //如何解析xml protected void doParse(Element element, BeanDefinitionBuilder bean) &#123; // this will never be null since the schema explicitly requires that a value be supplied String pattern = element.getAttribute("pattern"); bean.addConstructorArg(pattern); // this however is an optional property String lenient = element.getAttribute("lenient"); if (StringUtils.hasText(lenient)) &#123; bean.addPropertyValue("lenient", Boolean.valueOf(lenient)); &#125; &#125;&#125; 在spring上注册上面这些元素这一步是最后一步，就是把前面的工作串起来，其实就是配置两个文件: META-INF/spring.handlers 配置xml schema 和 namespace handler class的关系，本例中配置如下： http\://www.mycompany.com/schema/myns=org.springframework.samples.xml.MyNamespaceHandler ‘:’在java的properties文件中是关键字，所以要转移 key值http\://www.mycompany.com/schema/myns 对应schema，value就是namespace handler的实现类 META-INF/spring.schemas 指定xml schema文件的位置，本例中配置如下： http\://www.mycompany.com/schema/myns/myns.xsd=org/springframework/samples/xml/myns.xsd 使用经过上面4步以后，在程序就就可以使用自定义的标签了，用法如下： 12345678910111213141516&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:myns="http://www.mycompany.com/schema/myns" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.mycompany.com/schema/myns http://www.mycompany.com/schema/myns/myns.xsd"&gt; &lt;!--注意这里需要引用标签 xmlns:myns="http://www.mycompany.com/schema/myns"--&gt; &lt;!--并且在schemaLocation中加入自定义标签的文职--&gt; &lt;!-- as a top-level bean --&gt; &lt;myns:dateformat id="defaultDateFormat" pattern="yyyy-MM-dd HH:mm" lenient="true"/&gt;&lt;/beans&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[java 序列化(一)]]></title>
      <url>%2F2017%2F07%2F23%2Fjava-%E5%BA%8F%E5%88%97%E5%8C%96-%E4%B8%80%2F</url>
      <content type="text"><![CDATA[java序列化废话序列化就是为了保存在内存中的各种对象的状态，并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存Object States，但是Java给你提供一种应该比你自己好的保存对象状态的机制,那就是序列化。在java中实现Serializable接口就说明该类可以被序列化。一般用于: 把内存中对象保存在文件或数据库中 网络传输 几个问题1.静态成员变量可以被序列化么？ 不行的。 1234567891011121314151617181920212223242526public class Foo implements Serializable &#123; private static final long serialVersionUID = -3450064362986273896L; public static int a = 1;&#125;public class SerialMain &#123; public static void main(String[] arg) throws IOException, ClassNotFoundException &#123; Foo myFoo = new Foo(); Foo.a = 100; FileOutputStream fs = new FileOutputStream("foo.ser"); ObjectOutputStream os = new ObjectOutputStream(fs); os.writeObject(myFoo); os.close(); Foo.setA(10000); FileInputStream fi=new FileInputStream("foo.ser"); ObjectInputStream oi=new ObjectInputStream(fi); Foo box=(Foo)oi.readObject(); oi.close(); System.out.println(box); &#125;&#125; 结果为 a=10000因为序列化是记录对象的状态，并不记录类的状态。 2.serialVersionUID的作用serialVersionUID可以理解为可序列化对象的一个运行时版本号，当反序列化时jvm会对比目标对象和源数据之间的版本号是否一致，如果不一致会报InvalidClassException。导致serialVersionUID不一致的可能有很多，比如对象属性的变化，环境的不同等，所以为了兼容性，建议Serializable对象都定义一个serialVersionUID成员变量，格式如上代码所示。这样既能避免环境问题，又能当对象版本变化时不报错（此时只序列化能识别的对象，但是我感觉这并不是一个好的现象，这样会不能及时发现升级，有可能造成更大的错误。） 3.enum序列化enum序列化其实被序列化的是名字，反序列化时用valueof方法来匹配，这个比较坑，特别是系统升级时，所以使用时一定要谨慎。 protobuff什么是protobufprotobuff是google开源的语言无关，平台无关的可扩展的序列化结构（就像xml一样，不过更简单，更高效）。用户可以通过一次定义如何构建数据，然后可以使用不同的语言方便的读写这些数据。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2-Binding学习笔记]]></title>
      <url>%2F2017%2F04%2F17%2FAngular2-Binding%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[纵观全局绑定的类型可以根据数据流的方向分成三类： 1.从数据源到视图 2.从视图到数据源 3.双向的从视图到数据源再到视图 下面是三种绑定的比较，里面具体名词不清楚没关系，后面会讲到 第一类绑定： 指令 ===&gt; 视图目标该绑定数据从指令流向模板中，主要有一下几种 1.插值表达式 2.绑定到Property上 3.绑定到Attribute上 4.绑定到class上 5.绑定到style上 注：在分别讲这几种类型之前先明确一个概念: Property vs Attribute (转自angular官网)HTML attribute 与 DOM property 的对比要想理解 Angular 绑定如何工作，重点是搞清 HTML attribute 和 DOM property 之间的区别。&emsp;&emsp;1.attribute 是由 HTML 定义的。property 是由 DOM (Document Object Model) 定义的。&emsp;&emsp;2.少量 HTML attribute 和 property 之间有着 1:1 的映射，如id。&emsp;&emsp;3.有些 HTML attribute 没有对应的 property，如colspan。&emsp;&emsp;4.有些 DOM property 没有对应的 attribute，如textContent。&emsp;&emsp;5.大量 HTML attribute看起来映射到了property…… 但却不像我们想的那样！最后一类尤其让人困惑…… 除非我们能理解这个普遍原则：attribute 初始化 DOM property，然后它们的任务就完成了。property 的值可以改变；attribute 的值不能改变。例如，当浏览器渲染&lt;input type=”text” value=”Bob”&gt;时，它将创建相应 DOM 节点， 其value property 被初始化为 “Bob”。当用户在输入框中输入 “Sally” 时，DOM 元素的value property 变成了 “Sally”。 但是这个 HTML value attribute 保持不变。如果我们读取 input 元素的 attribute，就会发现确实没变： input.getAttribute(‘value’) // 返回 “Bob”。HTML attribute value指定了初始值；DOM value property 是当前值。disabled attribute 是另一个古怪的例子。按钮的disabled property 是false，因为默认情况下按钮是可用的。 当我们添加disabled attribute 时，只要它出现了按钮的disabled property 就初始化为true，于是按钮就被禁用了。添加或删除disabled attribute会禁用或启用这个按钮。但 attribute 的值无关紧要，这就是我们为什么没法通过 &lt;button disabled=”false”&gt;仍被禁用&lt;/button&gt;这种写法来启用按钮。设置按钮的disabled property（如，通过 Angular 绑定）可以禁用或启用这个按钮。 这就是 property 的价值。就算名字相同，HTML attribute 和 DOM property 也不是同一样东西。 简单来说就是HTML attribute是html元素定义的时候，定义完以后angular中操作改变的都是DOM property的值，所以除了插值表达式之外的绑定类型，在等号左边是目标名， 无论是包在括号中 ([]、()) 还是用前缀形式 (bind-、on-、bindon-)，这个目标名就是属性（Property）的名字。 插值表达式插值表达式是绑定中最简单的一种，就是把{ { } }中的计算结果插入到HTML标签内的文本上，或给标签的属性赋值。&lt;h3&gt; { { title } } &lt;img src=&quot;{ {heroImageUrl} }&quot; style=&quot;height:30px&quot;&gt; &lt;p&gt;The sum of 1 + 1 is { {1 + 1} }&lt;/p&gt;&lt;/h3&gt; 第一处是直接插入到HTML标签内的文本，第二处是给标签的属性赋值，第三处是也是给HTML标签内的文本插值，但是值是经过计算得来的 绑定到Property绑定到property分为两类: 元素的property &lt;button [disabled]=&quot;isUnchanged&quot;&gt;Cancel is disabled&lt;/button&gt; 指令(组件)的property 设置angular自带指令的属性(这个在属性型指令和结构型指令中会细讲) &lt;div [ngClass]=&quot;classes&quot;&gt;[ngClass] binding to the classes property&lt;/div&gt; 设置自定义的组件(指令)的属性 &lt;hero-detail [heroName]=&quot;hero&quot; &gt;&lt;/hero-detail&gt; 此时hero-detail的代码如下: 12345678910@Component(&#123; selector: &apos;hero-detail&apos;, template: ` &lt;h1&gt;heroName: &#123;&#123;heroName&#125;&#125;&lt;/h1&gt;`,&#125;)export class HeroDetailComponent &#123; @Input() heroName:string;&#125; 即[heroName]就是组件中的待输入的property，类似java中的一个类的构造参数 绑定到property的过程是单向的，即从组件的数据流向目标属性的数据，如果必须读取目标元素上的属性或调用它的某个方法，得用另一种技术 — ViewChild 和 ContentChild。 绑定到Attribute&emsp;&emsp;绑定到Attribute的原因大多是元素没有属性可绑的时候，所以必须使用attribute绑定。table中的 colspan/rowspan 等 attribute。 它们是纯粹的 attribute，没有对应的属性可供绑定。 12345678&lt;table border=1&gt; &lt;!-- expression calculates colspan=2 --&gt; &lt;tr&gt;&lt;td [attr.colspan]=&quot;1 + 1&quot;&gt;One-Two&lt;/td&gt;&lt;/tr&gt; &lt;!-- ERROR: There is no `colspan` property to set! &lt;tr&gt;&lt;td colspan=&quot;&#123;&#123;1 + 1&#125;&#125;&quot;&gt;Three-Four&lt;/td&gt;&lt;/tr&gt; --&gt; &lt;tr&gt;&lt;td&gt;Five&lt;/td&gt;&lt;td&gt;Six&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 绑定到CSS上借助 CSS 类绑定，可以从元素的class attribute 上添加和移除 CSS 类名。12&lt;!-- toggle the &quot;special&quot; class on/off with a property --&gt;&lt;div [class.special]=&quot;isSpecial&quot;&gt;The class binding is special&lt;/div&gt; 绑定到style上样式绑定的语法与属性绑定类似12&lt;button [style.color]=&quot;isSpecial ? &apos;red&apos;: &apos;green&apos;&quot;&gt;Red&lt;/button&gt;&lt;button [style.background-color]=&quot;canSave ? &apos;cyan&apos;: &apos;grey&apos;&quot; &gt;Save&lt;/button&gt; 第二类绑定：视图目标 ===&gt; 指令基本语法 :圆括号中的名称 —— 比如(click) —— 标记出目标事件。在下面例子中，目标是按钮的 click 事件。1&lt;button (click)=&quot;onSave($event)&quot;&gt;Save&lt;/button&gt; 绑定会通过名叫$event的事件对象传递关于此事件的信息(包括数据值) 使用EventEmitter实现自定义事件通常，指令使用 Angular EventEmitter 来触发自定义事件。 指令创建一个EventEmitter实例，并且把它作为属性暴露出来。 指令调用EventEmitter.emit(payload)来触发事件，可以传入任何东西作为消息载荷。 父指令通过绑定到这个属性来监听事件，并通过$event对象来访问载荷。 假设HeroDetailComponent用于显示英雄的信息，并响应用户的动作。 虽然HeroDetailComponent包含删除按钮，但它自己并不知道该如何删除这个英雄。 最好的做法是触发事件来报告“删除用户”的请求。、 123456789101112131415template: `&lt;div&gt; &lt;img src=&quot;&#123;&#123;heroImageUrl&#125;&#125;&quot;&gt; &lt;span [style.text-decoration]=&quot;lineThrough&quot;&gt; &#123;&#123;prefix&#125;&#125; &#123;&#123;hero?.name&#125;&#125; &lt;/span&gt; &lt;button (click)=&quot;delete()&quot;&gt;Delete&lt;/button&gt;&lt;/div&gt;`// This component make a request but it can&apos;t actually delete a hero.deleteRequest = new EventEmitter&lt;Hero&gt;();delete() &#123; this.deleteRequest.emit(this.hero);&#125; 组件定义了deleteRequest属性，它是EventEmitter实例。 当用户点击删除时，组件会调用delete()方法，让EventEmitter发出一个Hero对象。 现在，假设有个宿主的父组件，它绑定了HeroDetailComponent的deleteRequest事件。 1&lt;hero-detail (deleteRequest)=&quot;deleteHero($event)&quot; [hero]=&quot;currentHero&quot;&gt;&lt;/hero-detail&gt; 当deleteRequest事件触发时，Angular 调用父组件的deleteHero方法， 在$event变量中传入要删除的英雄（来自HeroDetail）。 上面这个例子就可以看成hero-detail组件自定义了一个deleteRequest事件（可以类比button元素的click事件） 第三类绑定：视图目标 &lt;===&gt; 指令 (双向邦定)简单来说双向绑定就是既要设置 元素属性 ，又要监听元素事件变化。Angular 为此提供一种特殊的双向数据绑定语法：[(x)]。 [(x)]语法结合了属性绑定的方括号[x]和事件绑定的圆括号(x)当一个元素拥有可以设置的属性x和对应的事件xChange时，解释[(x)]语法就容易多了。 下面的SizerComponent符合这个模式。它有size属性和伴随的sizeChange事件： sizer.component.ts1234567891011121314151617181920import &#123; Component, EventEmitter, Input, Output &#125; from &apos;@angular/core&apos;;@Component(&#123; selector: &apos;my-sizer&apos;, template: ` &lt;div&gt; &lt;button (click)=&quot;dec()&quot; title=&quot;smaller&quot;&gt;-&lt;/button&gt; &lt;button (click)=&quot;inc()&quot; title=&quot;bigger&quot;&gt;+&lt;/button&gt; &lt;label [style.font-size.px]=&quot;size&quot;&gt;FontSize: &#123;&#123;size&#125;&#125;px&lt;/label&gt; &lt;/div&gt;`&#125;)export class SizerComponent &#123; @Input() size: number | string; @Output() sizeChange = new EventEmitter&lt;number&gt;(); dec() &#123; this.resize(-1); &#125; inc() &#123; this.resize(+1); &#125; resize(delta: number) &#123; this.size = Math.min(40, Math.max(8, +this.size + delta)); this.sizeChange.emit(this.size); &#125;&#125; 这段代码重在于: size是一个输入属性用于初始 点击smaller或bigger会触发size大小的变化 size大小变化后会触发sizeChange事件(这里用到了上文中说到的EventEmitter) app.component.ts12&lt;my-sizer [(size)]=&quot;fontSizePx&quot;&gt;&lt;/my-sizer&gt;&lt;div [style.font-size.px]=&quot;fontSizePx&quot;&gt;Resizable Text&lt;/div&gt; 在这列AppComponent的fontSizePx就被双向绑定到了SizerComponent上 SizerComponent的size的初始值就是AppComponent的fontSizePx 在SizerComponent组件内通过点击按钮更新size的大小会影响fontSizePx的大小，最终会改变Resizable Text的显示 双向绑定语法实际上是属性绑定和事件绑定的语法糖。 Angular将SizerComponent的绑定分解成这样：1&lt;my-sizer [size]=&quot;fontSizePx&quot; (sizeChange)=&quot;fontSizePx=$event&quot;&gt;&lt;/my-sizer&gt; 我们希望能在像&lt;input&gt;和&lt;select&gt;这样的 HTML 元素上使用双向数据绑定。 可惜，原生 HTML 元素不遵循x值和xChange事件的模式。 幸运的是，Angular 以 NgModel 指令为桥梁，允许在表单元素上使用双向数据绑定。 在使用ngModel指令之前需要先引入FormsModule 现在假设我们需要把一个input的value属性和输入变更都绑定到组件的myName属性。 使用以下方式也可以满足这个需求:12&lt;input [value]=&quot;myName&quot; (input)=&quot;myName&quot; &gt; 但是这个很不好用，因为你需要记住每一个标签的设置值得属性和变更时需要绑定的事件使用ngModel你可以用下面的方式完成同样的功能,它使用ngModel这个指令屏蔽了不同标签的设置属性和变更事件。123&lt;input [ngModel]=&quot;myName&quot; (ngModelChange)=&quot;myName&quot;&gt; 上面代码可以简写为:1&lt;input [(ngModel)]=&quot;myName&quot;&gt; 使用第二种方法比较简单，但是它的局限是只能完成属性值的绑定，如果想要实现更复杂的功能还是需要使用第一种写法。 因为HTML的元素实现细节不同，所以angular2只对基本的HTML Form元素提供了支持。 源码https://github.com/qwang1990/angular2/tree/master/angular_binding]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2 Module学习笔记]]></title>
      <url>%2F2017%2F04%2F08%2FAngular2-Module%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[概念Angular 模块能帮你把应用组织成多个内聚的功能块，可以类比java的package 定义1234567@NgModule(&#123; imports: [ CommonModule ], declarations: [ TitleComponent ], exports: [ TitleComponent ], providers: [ UserService ], &lt;!--bootstrap: [ AppComponent ]--&gt;&#125;) Angular 模块是一个由@NgModule装饰器提供元数据的类，元数据包括： imports: 导入其它模块，从其它模块中获得本模块所需的组件、指令和管道 declarations: 声明哪些组件、指令、管道属于该模块 exports: 公开某些类，以便其它的组件模板可以使用它们 provider: 在应用程序级提供服务，以便应用中的任何组件都能使用它 bootstrap: 把指定组件标记为引导 (bootstrap) 组件。当 Angular 引导应用时，它会在 DOM 中渲染AppComponent，并把结果放进index.html的元素标记内部。这个元数据只有根模块有。 模块基本使用 声明组件和指令: 定义的组件和指令必须在模块中声明了，模板才能识别组件和指令对应的标签 例如我们定义指令HighlightDirective： import { Directive, ElementRef } from &apos;@angular/core&apos;; @Directive({ selector: &apos;[highlight]&apos; }) /** Highlight the attached element in gold */ export class HighlightDirective { constructor(el: ElementRef) { el.nativeElement.style.backgroundColor = &apos;gold&apos;; console.log( `* AppRoot highlight called for ${el.nativeElement.tagName}`); } } 在使用 &lt;h1 highlight&gt;{{title}}&lt;/h1&gt; 前必须要在我们的module的declaration中加入如下定义： declarations: [ ... HighlightDirective, ... ], 服务提供商模块可以往应用的“根依赖注入器”中添加提供商，让那些服务在应用中到处可用,这个和在组件中提供服务不同。组件中提供的服务是分层级的。这个在多级注入的时候会讲到。 特性模块 为什么要有多个模块&emsp;&emsp;随着应用越来越大，如果只是用一个根模块就会出现很多问题。 比如指令冲突，我们在一个类中定义了ADirective，然后再另一个类中定义了同名的ADirective，并且他们的selector一样都是’sameName’.当我们在别处使用这个&lt;sameName … &gt;时就会出现，后一个declaration的指令会覆盖前一个declaration的指令。 什么是特性模块特性模块和根模块一样都是是带有@NgModule装饰器及其元数据的类，它和根模块有着同一个依赖注入器。不同点是: 1.我们引导根模块来启动应用，但导入特性模块来扩展应用。 2.特性模块可以对其它模块暴露或隐藏自己的实现。(通过exports来控制) 一个使用特性模块的小技巧—重新导出场景如下:&emsp;&emsp; 你有一个特性模块A, 它引入了CommonModule和FormsModule在自身模块内使用, 这时另一个模块B导入模块A, 而且B也需要使用CommonModule和FormsModule, 正常情况下B还需要导入CommonModule和FormsModule这两个模块,但如果模块A将CommonModule和FormsModule export出去, 这时B就只需导入A模块即可。 没图说个XX 本例中RootModule分别引入了ModuleM和ModuleW ModuleM 声明了两个组件, 导入了FormModule, 并提供了ServiceMA服务,最后它导出了自己的其中一个组件ComponentMA和ForModule ModuleW 声明了两个组件, 导入了RouterModule, 并提供了ServiceWA服务,最后它只导出了自己的其中一个组件ComponentMA 此时会有以下结果: 1. ModuleM 中可以使用自己声明的组件(即在自己的模板中使用组件的selector标签)和FormModule中的功能。 2. ModuleW 中可以使用自己声明的组件(即在自己的模板中使用组件的selector标签)和RouterModule中的功能。 3. 全局中都能使用 serviceA,ServiceMA,serviceWA。以为模块级别的依赖注入器是同一个。 4. 在RootModule中可以使用FormModule,ComponentMA和ComponentWB。 源码：https://github.com/qwang1990/angular2/tree/master/angular_module]]></content>
    </entry>

    
  
  
</search>
