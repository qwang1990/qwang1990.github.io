<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[spring XML extensions]]></title>
      <url>%2F2017%2F11%2F19%2Fspring-XML-extensions%2F</url>
      <content type="text"><![CDATA[背景最近看dubbo源码，其中使用spring加载配置的时候用到了自定义xml标签的功能。所以就看了一下。其实从spring2.0开始就已经有该功能了。 步骤其实自定义xml标签十分简单，只需要一下四步 描述自定义元素的xml schema NamespaceHandler BeanDefinitionParse 在spring上注册上面这些元素 编写xml schema创建文件myns.xsd123456789101112131415161718192021&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsd:schema xmlns="http://www.mycompany.com/schema/myns" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:beans="http://www.springframework.org/schema/beans" targetNamespace="http://www.mycompany.com/schema/myns" elementFormDefault="qualified" attributeFormDefault="unqualified"&gt; &lt;xsd:import namespace="http://www.springframework.org/schema/beans"/&gt; &lt;xsd:element name="dateformat"&gt; &lt;xsd:complexType&gt; &lt;xsd:complexContent&gt; &lt;xsd:extension base="beans:identifiedType"&gt; &lt;xsd:attribute name="lenient" type="xsd:boolean"/&gt; &lt;xsd:attribute name="pattern" type="xsd:string" use="required"/&gt; &lt;/xsd:extension&gt; &lt;/xsd:complexContent&gt; &lt;/xsd:complexType&gt; &lt;/xsd:element&gt;&lt;/xsd:schema&gt; 具体语法 NamespaceHandler用于解析我们上面定义的命名空间常规用法为每一个顶级的xml元素定义一个bean definition，比如上面的xml schema中dateformat就对应一个bean definition12345678910111213package org.springframework.samples.xml;import org.springframework.beans.factory.xml.NamespaceHandlerSupport;public class MyNamespaceHandler extends NamespaceHandlerSupport &#123; //在handler被调用前调用 public void init() &#123; //此处为xml顶级元素dateformat注册了一个bean definition registerBeanDefinitionParser("dateformat", new SimpleDateFormatBeanDefinitionParser()); &#125;&#125; 在这个例子中NamespaceHandler中并没有太多逻辑，它其实就是一个分发作用，可以在其上注册很多的bean definition，对应每一个自定义标签。具体的处理逻辑在bean definition中。 BeanDefinitionParseBeanDefinitionParse用于解析一个自定义schema中单独的顶级xml元素。123456789101112131415161718192021222324252627282930package org.springframework.samples.xml;import org.springframework.beans.factory.support.BeanDefinitionBuilder;import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;import org.springframework.util.StringUtils;import org.w3c.dom.Element;import java.text.SimpleDateFormat;public class SimpleDateFormatBeanDefinitionParser extends AbstractSingleBeanDefinitionParser &#123; //解析后的目标class protected Class getBeanClass(Element element) &#123; return SimpleDateFormat.class; &#125; //如何解析xml protected void doParse(Element element, BeanDefinitionBuilder bean) &#123; // this will never be null since the schema explicitly requires that a value be supplied String pattern = element.getAttribute("pattern"); bean.addConstructorArg(pattern); // this however is an optional property String lenient = element.getAttribute("lenient"); if (StringUtils.hasText(lenient)) &#123; bean.addPropertyValue("lenient", Boolean.valueOf(lenient)); &#125; &#125;&#125; 在spring上注册上面这些元素这一步是最后一步，就是把前面的工作串起来，其实就是配置两个文件: META-INF/spring.handlers 配置xml schema 和 namespace handler class的关系，本例中配置如下： http\://www.mycompany.com/schema/myns=org.springframework.samples.xml.MyNamespaceHandler ‘:’在java的properties文件中是关键字，所以要转移 key值http\://www.mycompany.com/schema/myns 对应schema，value就是namespace handler的实现类 META-INF/spring.schemas 指定xml schema文件的位置，本例中配置如下： http\://www.mycompany.com/schema/myns/myns.xsd=org/springframework/samples/xml/myns.xsd 使用经过上面4步以后，在程序就就可以使用自定义的标签了，用法如下： 12345678910111213141516&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:myns="http://www.mycompany.com/schema/myns" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.mycompany.com/schema/myns http://www.mycompany.com/schema/myns/myns.xsd"&gt; &lt;!--注意这里需要引用标签 xmlns:myns="http://www.mycompany.com/schema/myns"--&gt; &lt;!--并且在schemaLocation中加入自定义标签的文职--&gt; &lt;!-- as a top-level bean --&gt; &lt;myns:dateformat id="defaultDateFormat" pattern="yyyy-MM-dd HH:mm" lenient="true"/&gt;&lt;/beans&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[java 序列化(一)]]></title>
      <url>%2F2017%2F07%2F23%2Fjava-%E5%BA%8F%E5%88%97%E5%8C%96-%E4%B8%80%2F</url>
      <content type="text"><![CDATA[java序列化废话序列化就是为了保存在内存中的各种对象的状态，并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存Object States，但是Java给你提供一种应该比你自己好的保存对象状态的机制,那就是序列化。在java中实现Serializable接口就说明该类可以被序列化。一般用于: 把内存中对象保存在文件或数据库中 网络传输 几个问题1.静态成员变量可以被序列化么？ 不行的。 1234567891011121314151617181920212223242526public class Foo implements Serializable &#123; private static final long serialVersionUID = -3450064362986273896L; public static int a = 1;&#125;public class SerialMain &#123; public static void main(String[] arg) throws IOException, ClassNotFoundException &#123; Foo myFoo = new Foo(); Foo.a = 100; FileOutputStream fs = new FileOutputStream("foo.ser"); ObjectOutputStream os = new ObjectOutputStream(fs); os.writeObject(myFoo); os.close(); Foo.setA(10000); FileInputStream fi=new FileInputStream("foo.ser"); ObjectInputStream oi=new ObjectInputStream(fi); Foo box=(Foo)oi.readObject(); oi.close(); System.out.println(box); &#125;&#125; 结果为 a=10000因为序列化是记录对象的状态，并不记录类的状态。 2.serialVersionUID的作用serialVersionUID可以理解为可序列化对象的一个运行时版本号，当反序列化时jvm会对比目标对象和源数据之间的版本号是否一致，如果不一致会报InvalidClassException。导致serialVersionUID不一致的可能有很多，比如对象属性的变化，环境的不同等，所以为了兼容性，建议Serializable对象都定义一个serialVersionUID成员变量，格式如上代码所示。这样既能避免环境问题，又能当对象版本变化时不报错（此时只序列化能识别的对象，但是我感觉这并不是一个好的现象，这样会不能及时发现升级，有可能造成更大的错误。） 3.enum序列化enum序列化其实被序列化的是名字，反序列化时用valueof方法来匹配，这个比较坑，特别是系统升级时，所以使用时一定要谨慎。 protobuff什么是protobufprotobuff是google开源的语言无关，平台无关的可扩展的序列化结构（就像xml一样，不过更简单，更高效）。用户可以通过一次定义如何构建数据，然后可以使用不同的语言方便的读写这些数据。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2-Binding学习笔记]]></title>
      <url>%2F2017%2F04%2F17%2FAngular2-Binding%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[纵观全局绑定的类型可以根据数据流的方向分成三类： 1.从数据源到视图 2.从视图到数据源 3.双向的从视图到数据源再到视图 下面是三种绑定的比较，里面具体名词不清楚没关系，后面会讲到 第一类绑定： 指令 ===&gt; 视图目标该绑定数据从指令流向模板中，主要有一下几种 1.插值表达式 2.绑定到Property上 3.绑定到Attribute上 4.绑定到class上 5.绑定到style上 注：在分别讲这几种类型之前先明确一个概念: Property vs Attribute (转自angular官网)HTML attribute 与 DOM property 的对比要想理解 Angular 绑定如何工作，重点是搞清 HTML attribute 和 DOM property 之间的区别。&emsp;&emsp;1.attribute 是由 HTML 定义的。property 是由 DOM (Document Object Model) 定义的。&emsp;&emsp;2.少量 HTML attribute 和 property 之间有着 1:1 的映射，如id。&emsp;&emsp;3.有些 HTML attribute 没有对应的 property，如colspan。&emsp;&emsp;4.有些 DOM property 没有对应的 attribute，如textContent。&emsp;&emsp;5.大量 HTML attribute看起来映射到了property…… 但却不像我们想的那样！最后一类尤其让人困惑…… 除非我们能理解这个普遍原则：attribute 初始化 DOM property，然后它们的任务就完成了。property 的值可以改变；attribute 的值不能改变。例如，当浏览器渲染&lt;input type=”text” value=”Bob”&gt;时，它将创建相应 DOM 节点， 其value property 被初始化为 “Bob”。当用户在输入框中输入 “Sally” 时，DOM 元素的value property 变成了 “Sally”。 但是这个 HTML value attribute 保持不变。如果我们读取 input 元素的 attribute，就会发现确实没变： input.getAttribute(‘value’) // 返回 “Bob”。HTML attribute value指定了初始值；DOM value property 是当前值。disabled attribute 是另一个古怪的例子。按钮的disabled property 是false，因为默认情况下按钮是可用的。 当我们添加disabled attribute 时，只要它出现了按钮的disabled property 就初始化为true，于是按钮就被禁用了。添加或删除disabled attribute会禁用或启用这个按钮。但 attribute 的值无关紧要，这就是我们为什么没法通过 &lt;button disabled=”false”&gt;仍被禁用&lt;/button&gt;这种写法来启用按钮。设置按钮的disabled property（如，通过 Angular 绑定）可以禁用或启用这个按钮。 这就是 property 的价值。就算名字相同，HTML attribute 和 DOM property 也不是同一样东西。 简单来说就是HTML attribute是html元素定义的时候，定义完以后angular中操作改变的都是DOM property的值，所以除了插值表达式之外的绑定类型，在等号左边是目标名， 无论是包在括号中 ([]、()) 还是用前缀形式 (bind-、on-、bindon-)，这个目标名就是属性（Property）的名字。 插值表达式插值表达式是绑定中最简单的一种，就是把{ { } }中的计算结果插入到HTML标签内的文本上，或给标签的属性赋值。&lt;h3&gt; { { title } } &lt;img src=&quot;{ {heroImageUrl} }&quot; style=&quot;height:30px&quot;&gt; &lt;p&gt;The sum of 1 + 1 is { {1 + 1} }&lt;/p&gt;&lt;/h3&gt; 第一处是直接插入到HTML标签内的文本，第二处是给标签的属性赋值，第三处是也是给HTML标签内的文本插值，但是值是经过计算得来的 绑定到Property绑定到property分为两类: 元素的property &lt;button [disabled]=&quot;isUnchanged&quot;&gt;Cancel is disabled&lt;/button&gt; 指令(组件)的property 设置angular自带指令的属性(这个在属性型指令和结构型指令中会细讲) &lt;div [ngClass]=&quot;classes&quot;&gt;[ngClass] binding to the classes property&lt;/div&gt; 设置自定义的组件(指令)的属性 &lt;hero-detail [heroName]=&quot;hero&quot; &gt;&lt;/hero-detail&gt; 此时hero-detail的代码如下: 12345678910@Component(&#123; selector: &apos;hero-detail&apos;, template: ` &lt;h1&gt;heroName: &#123;&#123;heroName&#125;&#125;&lt;/h1&gt;`,&#125;)export class HeroDetailComponent &#123; @Input() heroName:string;&#125; 即[heroName]就是组件中的待输入的property，类似java中的一个类的构造参数 绑定到property的过程是单向的，即从组件的数据流向目标属性的数据，如果必须读取目标元素上的属性或调用它的某个方法，得用另一种技术 — ViewChild 和 ContentChild。 绑定到Attribute&emsp;&emsp;绑定到Attribute的原因大多是元素没有属性可绑的时候，所以必须使用attribute绑定。table中的 colspan/rowspan 等 attribute。 它们是纯粹的 attribute，没有对应的属性可供绑定。 12345678&lt;table border=1&gt; &lt;!-- expression calculates colspan=2 --&gt; &lt;tr&gt;&lt;td [attr.colspan]=&quot;1 + 1&quot;&gt;One-Two&lt;/td&gt;&lt;/tr&gt; &lt;!-- ERROR: There is no `colspan` property to set! &lt;tr&gt;&lt;td colspan=&quot;&#123;&#123;1 + 1&#125;&#125;&quot;&gt;Three-Four&lt;/td&gt;&lt;/tr&gt; --&gt; &lt;tr&gt;&lt;td&gt;Five&lt;/td&gt;&lt;td&gt;Six&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 绑定到CSS上借助 CSS 类绑定，可以从元素的class attribute 上添加和移除 CSS 类名。12&lt;!-- toggle the &quot;special&quot; class on/off with a property --&gt;&lt;div [class.special]=&quot;isSpecial&quot;&gt;The class binding is special&lt;/div&gt; 绑定到style上样式绑定的语法与属性绑定类似12&lt;button [style.color]=&quot;isSpecial ? &apos;red&apos;: &apos;green&apos;&quot;&gt;Red&lt;/button&gt;&lt;button [style.background-color]=&quot;canSave ? &apos;cyan&apos;: &apos;grey&apos;&quot; &gt;Save&lt;/button&gt; 第二类绑定：视图目标 ===&gt; 指令基本语法 :圆括号中的名称 —— 比如(click) —— 标记出目标事件。在下面例子中，目标是按钮的 click 事件。1&lt;button (click)=&quot;onSave($event)&quot;&gt;Save&lt;/button&gt; 绑定会通过名叫$event的事件对象传递关于此事件的信息(包括数据值) 使用EventEmitter实现自定义事件通常，指令使用 Angular EventEmitter 来触发自定义事件。 指令创建一个EventEmitter实例，并且把它作为属性暴露出来。 指令调用EventEmitter.emit(payload)来触发事件，可以传入任何东西作为消息载荷。 父指令通过绑定到这个属性来监听事件，并通过$event对象来访问载荷。 假设HeroDetailComponent用于显示英雄的信息，并响应用户的动作。 虽然HeroDetailComponent包含删除按钮，但它自己并不知道该如何删除这个英雄。 最好的做法是触发事件来报告“删除用户”的请求。、 123456789101112131415template: `&lt;div&gt; &lt;img src=&quot;&#123;&#123;heroImageUrl&#125;&#125;&quot;&gt; &lt;span [style.text-decoration]=&quot;lineThrough&quot;&gt; &#123;&#123;prefix&#125;&#125; &#123;&#123;hero?.name&#125;&#125; &lt;/span&gt; &lt;button (click)=&quot;delete()&quot;&gt;Delete&lt;/button&gt;&lt;/div&gt;`// This component make a request but it can&apos;t actually delete a hero.deleteRequest = new EventEmitter&lt;Hero&gt;();delete() &#123; this.deleteRequest.emit(this.hero);&#125; 组件定义了deleteRequest属性，它是EventEmitter实例。 当用户点击删除时，组件会调用delete()方法，让EventEmitter发出一个Hero对象。 现在，假设有个宿主的父组件，它绑定了HeroDetailComponent的deleteRequest事件。 1&lt;hero-detail (deleteRequest)=&quot;deleteHero($event)&quot; [hero]=&quot;currentHero&quot;&gt;&lt;/hero-detail&gt; 当deleteRequest事件触发时，Angular 调用父组件的deleteHero方法， 在$event变量中传入要删除的英雄（来自HeroDetail）。 上面这个例子就可以看成hero-detail组件自定义了一个deleteRequest事件（可以类比button元素的click事件） 第三类绑定：视图目标 &lt;===&gt; 指令 (双向邦定)简单来说双向绑定就是既要设置 元素属性 ，又要监听元素事件变化。Angular 为此提供一种特殊的双向数据绑定语法：[(x)]。 [(x)]语法结合了属性绑定的方括号[x]和事件绑定的圆括号(x)当一个元素拥有可以设置的属性x和对应的事件xChange时，解释[(x)]语法就容易多了。 下面的SizerComponent符合这个模式。它有size属性和伴随的sizeChange事件： sizer.component.ts1234567891011121314151617181920import &#123; Component, EventEmitter, Input, Output &#125; from &apos;@angular/core&apos;;@Component(&#123; selector: &apos;my-sizer&apos;, template: ` &lt;div&gt; &lt;button (click)=&quot;dec()&quot; title=&quot;smaller&quot;&gt;-&lt;/button&gt; &lt;button (click)=&quot;inc()&quot; title=&quot;bigger&quot;&gt;+&lt;/button&gt; &lt;label [style.font-size.px]=&quot;size&quot;&gt;FontSize: &#123;&#123;size&#125;&#125;px&lt;/label&gt; &lt;/div&gt;`&#125;)export class SizerComponent &#123; @Input() size: number | string; @Output() sizeChange = new EventEmitter&lt;number&gt;(); dec() &#123; this.resize(-1); &#125; inc() &#123; this.resize(+1); &#125; resize(delta: number) &#123; this.size = Math.min(40, Math.max(8, +this.size + delta)); this.sizeChange.emit(this.size); &#125;&#125; 这段代码重在于: size是一个输入属性用于初始 点击smaller或bigger会触发size大小的变化 size大小变化后会触发sizeChange事件(这里用到了上文中说到的EventEmitter) app.component.ts12&lt;my-sizer [(size)]=&quot;fontSizePx&quot;&gt;&lt;/my-sizer&gt;&lt;div [style.font-size.px]=&quot;fontSizePx&quot;&gt;Resizable Text&lt;/div&gt; 在这列AppComponent的fontSizePx就被双向绑定到了SizerComponent上 SizerComponent的size的初始值就是AppComponent的fontSizePx 在SizerComponent组件内通过点击按钮更新size的大小会影响fontSizePx的大小，最终会改变Resizable Text的显示 双向绑定语法实际上是属性绑定和事件绑定的语法糖。 Angular将SizerComponent的绑定分解成这样：1&lt;my-sizer [size]=&quot;fontSizePx&quot; (sizeChange)=&quot;fontSizePx=$event&quot;&gt;&lt;/my-sizer&gt; 我们希望能在像&lt;input&gt;和&lt;select&gt;这样的 HTML 元素上使用双向数据绑定。 可惜，原生 HTML 元素不遵循x值和xChange事件的模式。 幸运的是，Angular 以 NgModel 指令为桥梁，允许在表单元素上使用双向数据绑定。 在使用ngModel指令之前需要先引入FormsModule 现在假设我们需要把一个input的value属性和输入变更都绑定到组件的myName属性。 使用以下方式也可以满足这个需求:12&lt;input [value]=&quot;myName&quot; (input)=&quot;myName&quot; &gt; 但是这个很不好用，因为你需要记住每一个标签的设置值得属性和变更时需要绑定的事件使用ngModel你可以用下面的方式完成同样的功能,它使用ngModel这个指令屏蔽了不同标签的设置属性和变更事件。123&lt;input [ngModel]=&quot;myName&quot; (ngModelChange)=&quot;myName&quot;&gt; 上面代码可以简写为:1&lt;input [(ngModel)]=&quot;myName&quot;&gt; 使用第二种方法比较简单，但是它的局限是只能完成属性值的绑定，如果想要实现更复杂的功能还是需要使用第一种写法。 因为HTML的元素实现细节不同，所以angular2只对基本的HTML Form元素提供了支持。 源码https://github.com/qwang1990/angular2/tree/master/angular_binding]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2 Module学习笔记]]></title>
      <url>%2F2017%2F04%2F08%2FAngular2-Module%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[概念Angular 模块能帮你把应用组织成多个内聚的功能块，可以类比java的package 定义1234567@NgModule(&#123; imports: [ CommonModule ], declarations: [ TitleComponent ], exports: [ TitleComponent ], providers: [ UserService ], &lt;!--bootstrap: [ AppComponent ]--&gt;&#125;) Angular 模块是一个由@NgModule装饰器提供元数据的类，元数据包括： imports: 导入其它模块，从其它模块中获得本模块所需的组件、指令和管道 declarations: 声明哪些组件、指令、管道属于该模块 exports: 公开某些类，以便其它的组件模板可以使用它们 provider: 在应用程序级提供服务，以便应用中的任何组件都能使用它 bootstrap: 把指定组件标记为引导 (bootstrap) 组件。当 Angular 引导应用时，它会在 DOM 中渲染AppComponent，并把结果放进index.html的元素标记内部。这个元数据只有根模块有。 模块基本使用 声明组件和指令: 定义的组件和指令必须在模块中声明了，模板才能识别组件和指令对应的标签 例如我们定义指令HighlightDirective： import { Directive, ElementRef } from &apos;@angular/core&apos;; @Directive({ selector: &apos;[highlight]&apos; }) /** Highlight the attached element in gold */ export class HighlightDirective { constructor(el: ElementRef) { el.nativeElement.style.backgroundColor = &apos;gold&apos;; console.log( `* AppRoot highlight called for ${el.nativeElement.tagName}`); } } 在使用 &lt;h1 highlight&gt;{{title}}&lt;/h1&gt; 前必须要在我们的module的declaration中加入如下定义： declarations: [ ... HighlightDirective, ... ], 服务提供商模块可以往应用的“根依赖注入器”中添加提供商，让那些服务在应用中到处可用,这个和在组件中提供服务不同。组件中提供的服务是分层级的。这个在多级注入的时候会讲到。 特性模块 为什么要有多个模块&emsp;&emsp;随着应用越来越大，如果只是用一个根模块就会出现很多问题。 比如指令冲突，我们在一个类中定义了ADirective，然后再另一个类中定义了同名的ADirective，并且他们的selector一样都是’sameName’.当我们在别处使用这个&lt;sameName … &gt;时就会出现，后一个declaration的指令会覆盖前一个declaration的指令。 什么是特性模块特性模块和根模块一样都是是带有@NgModule装饰器及其元数据的类，它和根模块有着同一个依赖注入器。不同点是: 1.我们引导根模块来启动应用，但导入特性模块来扩展应用。 2.特性模块可以对其它模块暴露或隐藏自己的实现。(通过exports来控制) 一个使用特性模块的小技巧—重新导出场景如下:&emsp;&emsp; 你有一个特性模块A, 它引入了CommonModule和FormsModule在自身模块内使用, 这时另一个模块B导入模块A, 而且B也需要使用CommonModule和FormsModule, 正常情况下B还需要导入CommonModule和FormsModule这两个模块,但如果模块A将CommonModule和FormsModule export出去, 这时B就只需导入A模块即可。 没图说个XX 本例中RootModule分别引入了ModuleM和ModuleW ModuleM 声明了两个组件, 导入了FormModule, 并提供了ServiceMA服务,最后它导出了自己的其中一个组件ComponentMA和ForModule ModuleW 声明了两个组件, 导入了RouterModule, 并提供了ServiceWA服务,最后它只导出了自己的其中一个组件ComponentMA 此时会有以下结果: 1. ModuleM 中可以使用自己声明的组件(即在自己的模板中使用组件的selector标签)和FormModule中的功能。 2. ModuleW 中可以使用自己声明的组件(即在自己的模板中使用组件的selector标签)和RouterModule中的功能。 3. 全局中都能使用 serviceA,ServiceMA,serviceWA。以为模块级别的依赖注入器是同一个。 4. 在RootModule中可以使用FormModule,ComponentMA和ComponentWB。 源码：https://github.com/qwang1990/angular2/tree/master/angular_module]]></content>
    </entry>

    
  
  
</search>
