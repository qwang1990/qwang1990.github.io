<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[spring AOP]]></title>
      <url>%2F2018%2F01%2F13%2Fspring-AOP%2F</url>
      <content type="text"><![CDATA[AOP概念 Aspect(切面): 一个衡切很多class的模块。事物管理就是一个很好的例子。在Spring AOP中，切面由普通的class实现(schema-based approach)或带注解@Aspect的不同class实现。 Join point(连接点):程序执行中的点，如方法的调用或异常的抛出，在Spring AOP中专指程序的调用。 Advice(增强): 切面在特定的切入点执行的动作。类型有:’around’,’before’,’after’。很多AOP框架(包括Spring)把advice已interceptor的形式来实现，管理一个围绕着连接点的interceptors串。 Pointcut(切入点):符合切入条件的连接点。advice是和pointcut表达式相关联的，在连接点符合条件时执行。 Introduction(引入): 将方法和字段添加到被处理的类中。Spring允许你将新的接口(和对应的实现)引入到任何被处理的对象中。比如你可以使任何对象实现IsModified接口来简化缓存。 Target Object(目标对象):被增强的对象。如果AOP框架使用动态代理实现，它也被称为被代理的对象。 AOP proxy(AOP 代理): AOP框架创建的对象，用于实现增强。在Spring Framework中，AOP代理有可能是JDK的动态代理或者是CGLIB代理。 Weaving(植入):链接其他对象或应用创建增强对象的过程。可以在编译期(如:AspectJ compiler)，加载期，或运行期。Spring AOP和其他纯Java AOP框架都是在运行期进行植入的。 advice的类型 Before advice:在join point之前执行增强，它没有中断join point后续执行的能力(除非抛异常) After returning advice:在join point正常执行完后执行增强 After throwing advice:当方法抛出异常的时候执行增强 After(finally) advice:无论join point如何结束都执行增强 Around advice:在方法执行的前后来增强。这种类型的增强是能力最大的，它可以在方法执行的前或后加入自定义的行为。它也可以是否继续执行或直接返回或抛出异常。 Spring AOP的能力和目标Spring AOP是用纯java实现的，不需要其他的特别编译，不用控制类加载机制，所以适合用在servlet容器和应用中。 Spring AOP暂时只支持方法类型join point(建议是spring beans中的方法)。字段interception暂时不支持，虽然它可以在不破坏Spring AOP核心api的基础上添加。如果你想增强字段，可以考虑使用AspectJ。 Spring AOP的实现和其他大多AOP框架不尽相同。它致力于更紧密的结合AOP实现和Spring IoC，而不是提供最完成的AOP实现。 因此Spring AOP通常用于结合Spring IoC。切面可以使用普通的bean的语法。这是Spring AOP和其他AOP最大的不同。当然也有很多事情使用不适合使用Spring AOP，比如增强一个细粒度的对象？？（例如domain object），这时使用AspectJ是一个更好的选择。 Spring AOP从来不在提供完备的AOP功能上和AspectJ竞争。我相信每种proxy-based框架如Spring AOP和AspectJ都是有价值的。它们的关系应该是互相协作而不是竞争。Spring为了能使所有的AOP用户无缝集成了Spring AOP，IoC和AspectJ。 AOP 代理Spring AOP默认是使用标准的JDK动态代理。它可以代理任意的interface。当Spring AOP需要代理一个类而不是接口时，它也可以使用CGLIB代理。当业务对象没有实现接口的时候默认使用CGLIB。你也可以强制使用CGLIB(希望不要经常这样) 支持@AspectJ注解@AspectJ用来把常规java类标声明为切面。它是在AspectJ 5 release版本被引入的，Spring使用了同样的注解，使用AspectJ提供的库来解析匹配切点。尽管如此AOP用的还是纯的Spring AOP，没有依赖AspectJ的编译或植入。 开启@AspectJSpring可以通过XML或JAVA配置类的方式来支持@AspectJ。但是无论哪种形式，你要首先确保在你项目的类路径里有aspectjweaver.jar这个包 使用JAVA配置类的形式 12345@Configuration@EnableAspectJAutoProxypublic class AppConfig &#123;&#125; 使用XML配置的形式 1&lt;aop:aspectj-autoproxy/&gt; 声明一个aspect在你的程序中的任意一个class，只要以@AspectJ为注解就能被Spring自动检测到称为切面。12345678package org.xyz;import org.aspectj.lang.annotation.Aspect;@Aspect@Componentpublic class NotVeryUsefulAspect &#123;&#125; 切面和其他的类一样可以有方法和字段。它们也可以包含pointcut，advice，introduction。 注意：切面不可再被增强。当class带有@Aspect注解以后，他就不会被auto-proxying了。 声明pointcut回忆一下pointcut决定着对哪个join points感兴趣，因此也控制了增强执行的时机。Spring AOP只支持方法执行的join point，所以你可以认为pointcut就是匹配方法的。一个pointcut声明包含两部分:1.签名包含名字和参数，2.一个pointcut表达式，用来决定感兴趣的方法。在@AspectJ注解风格的AOP中，签名是由一个普通的方法定义提供的，pointcut表达式是包含在注解里的。 为pointcut的方法返回值必须为void 下面这个例子就是一个pointcut，名字为anyOldTransfer，它会匹配所有名为’transfer’的方法12@Pointcut("execution(* transfer(..))")// pointcut表达式private void anyOldTransfer() &#123;&#125;// 签名 pointcut表达式是常规的AspectJ5切点表达式，详情关注:AspectJ Programming Guide 支持的Pointcut选择器 execution - 用于匹配方法执行的join points，这个是Spring AOP主要使用的选择器 within - 匹配在某个特定类型内的join points（在SpringAOP中值在某个类型中的方法） this - 匹配AOP代理是指定类型的实例的所有join points(在SpringAOP中只有方法) target - 匹配目标类型是指定类型的实例的全部join points(在SpringAOP中只有方法) args - 按参数类型匹配 @target - 匹配带有指定注解的类 @args - 匹配运行时参数有指定注解的类 @within - 配置带有指定注解的类型 @annotation - 匹配带有指定注解的方法（因为SpringAOP中join point都是方法） 因为Spring AOP仅针对方法join point，所以上述选择器的定义范围会比AspectJ中的要窄。另外，AspectJ是type-based的语义，所以this和target指向同一个对象(执行该方法的对象)。Spring AOP是proxy-based体系，所以this和target是不同的，this指的是proxy对象，target指的是目标对象。 Spring AOP提供了一个新的pointcut选择器’bean’。它允许你匹配指定名称的spring bean(使用通配符时可以匹配一系列的bean) bean(idOrNameOfBean) 组合pointcut表达式pointcut表达式可以使用&amp;&amp;，|| 和！组合。它们也可以使用名字被引用。1234567891011//匹配所有public方法@Pointcut("execution(public * *(..))")private void anyPublicOperation() &#123;&#125;//匹配在trading下的所有join point@Pointcut("within(com.xyz.someapp.trading..*)")private void inTrading() &#123;&#125;//匹配trading下的所有public方法@Pointcut("anyPublicOperation() &amp;&amp; inTrading()")private void tradingOperation() &#123;&#125; 像上面那样使用简单的名字来标识负责的pointcut表达式是一种很好的习惯。当使用切点的名字来指代表达式时遵循java可见性规则(private只在同一类型可见，protected在继承中可见，public都可见)。可见性不影响切点的匹配。 共享的common切点定义在一个企业级的应用中，建议定义一个SystemArchitecture切面来声明共享的pointcut123456789101112131415161718192021222324252627282930package com.xyz.someapp;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;@Aspectpublic class SystemArchitecture &#123; /** * join point是web层，定义在com.xyz.someapp.web或其子package下的方法 */ @Pointcut("within(com.xyz.someapp.web..*)") public void inWebLayer() &#123;&#125; /** * join point是服务层，定义在com.xyz.someapp.service或其子packege下的方法 */ @Pointcut("within(com.xyz.someapp.service..*)") public void inServiceLayer() &#123;&#125; @Pointcut("within(com.xyz.someapp.dao..*)") public void inDataAccessLayer() &#123;&#125; @Pointcut("execution(* com.xyz.someapp..service.*.*(..))") public void businessService() &#123;&#125; @Pointcut("execution(* com.xyz.someapp.dao.*.*(..))") public void dataAccessOperation() &#123;&#125;&#125; 定义在上述切面中的切点可以在任何地方被访问到。比如想在服务层做一个事物管理，可以这么写:1234567891011aop:config&gt; &lt;aop:advisor pointcut="com.xyz.someapp.SystemArchitecture.businessService()" advice-ref="tx-advice"/&gt;&lt;/aop:config&gt;&lt;tx:advice id="tx-advice"&gt; &lt;tx:attributes&gt; &lt;tx:method name="*" propagation="REQUIRED"/&gt; &lt;/tx:attributes&gt;&lt;/tx:advice&gt; &lt;aop:config&gt; 和 &lt;aop:advisor&gt;元素，transaction元素会在后面讲到。 举例Spring AOP用户最常用的就是execution切点选择器。格式如下: execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern?) 上面例子中，除了ret-type-pattern,name-pattern,param-pattern外其余都是可选的。你经会用来表示return type，它可以匹配所以返回类型。name-pattern用来匹配方法名。param-pattern稍微有点复杂:()匹配无参数,(..)匹配任意数量的参数(0或很多),(\)表示有一个任意类型的参数,(*,String)匹配两个参数，第一个是任意类型，第二个是String。 下面看一些常见的例子: 所有public方法 execution(public (..)) 所有已set开头的方法 execution( set(..)) 所有AccountService接口里的方法 execution( com.xyz.service.AccountService.(..)) 所有定义在service包下的方法 execution( com.xyz.service.\.*(..)) 所有service包和其子包的方法 execution( com.xyz.service..\.*(..)) 在service包下的所有join point(在Spring AOP中只有方法) within(com.xyz.service.*) 在service包及其子包下的所有join point(在Spring AOP中只有方法) within(com.xyz.service..*) 所有代理实现AccountService接口的join point this(com.xyz.service.AccountService) 所有目标对象实现AccountService接口的 target(com.xyz.service.AccountService) 匹配一个参数，并且运行时参数实现Serializable args(java.io.Serializable)注意：改切点和execution( (java.io.Serializable))是不同的，args匹配运行时传入的是Serializable的，execution匹配的是声明为Serializable的 目标对象有@Transaction注解 @target(org.springframework.transaction.annotation.Transactional) 对象声明了@Transaction注解 @within(org.springframework.transaction.annotation.Transactional) 方法有@Transaction注解 @annotation(org.springframework.transaction.annotation.Transactional) 方法带有一个参数，并且运行时传入的参数带有@Classified注解 @args(com.xyz.security.Classified) Spring bean名为tradeService的所有方法 bean(tradeService) 所有匹配通配符表达式的bean的方法 bean(*Service) 写一个好的切点在编译期AspectJ会处理pointcuts来优化它的匹配效率。测试代码然后确认那些joint point(静态或动态)匹配给定的pointcuts是一个耗时的过程。动态匹配意味着匹配不能再静态分析的时候完全确定。当第一次遇到一个pointcut时，AspectJ会把它写入一个用于匹配的优化的表里。这意味着什么？简单来说pointcuts被重写在DNF(disjunctive normal form)中，pointcuts中的部分被分别存储，然后那些检测起来容易的部分会先检测。这就意味着你不必操心每一种pointcut选择器的性能，你只需要一个个的声明它们就行。尽管如此，AspectJ也只能做到这些了，为了更加优化匹配效率你应该思考这些选择器的目的是什么，然后尽可能的缩小选择的范围。目前选择期可以分为三大类:kinded,scoping,context。 kinded:选择某一个特定类型的join point。比如:execution,get,set,call,handler。 scoping:选择一组join point。比如:within，wihtincode contextual:依赖上下文来选择的。比如:this,target,@annotation 一个好的pointcut最好能至少包含前两种类型(kinded,scoping),当然在有些情况下contextual选择器还是需需要用的。仅仅提供kinded或contextual选择器可能会因为额外的处理和分析而导致影响植入效率(时间和内存使用上)。scoping选择器可以很快的匹配，并且用了它可以很快的去除很多不用分析的join point，这就是一个好的joint point最好能有一个它。 声明adviceadvice和切点表达式是相关的。它会在匹配切点的方法执行的前，后，或上下来执行。pointcut表达式可以被简单的以名字来引用或直接写到括号里。 Before adviceBefore advice就是使用@Before声明在切面里的方法 123456789101112131415161718import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;@Aspectpublic class BeforeExample &#123; @Before("com.xyz.myapp.SystemArchitecture.dataAccessOperation()") public void doAccessCheck() &#123; // ... &#125; //使用切点表达式 @Before("execution(* com.xyz.myapp.dao.*.*(..))") public void doAccessCheck() &#123; // ... &#125;&#125; After returning advice 1234567891011121314151617181920import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.AfterReturning;@Aspectpublic class AfterReturningExample &#123; @AfterReturning("com.xyz.myapp.SystemArchitecture.dataAccessOperation()") public void doAccessCheck() &#123; // ... &#125; //当你需要方法的返回值的时候 //这时参数值必须和returning属性值一致。 @AfterReturning( pointcut="com.xyz.myapp.SystemArchitecture.dataAccessOperation()", returning="retVal") public void doAccessCheck(Object retVal) &#123; // ... &#125;&#125; After throwing在匹配方法抛出异常是执行 1234567891011121314151617181920import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.AfterThrowing;@Aspectpublic class AfterThrowingExample &#123; @AfterThrowing("com.xyz.myapp.SystemArchitecture.dataAccessOperation()") public void doRecoveryActions() &#123; // ... &#125; //指定异常 @AfterThrowing( pointcut="com.xyz.myapp.SystemArchitecture.dataAccessOperation()", throwing="ex") public void doRecoveryActions(DataAccessException ex) &#123; // ... &#125;&#125; After (finally) advice处理正常或异常情况，典型的用法是释放资源 123456789101112import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.After;@Aspectpublic class AfterFinallyExample &#123; @After("com.xyz.myapp.SystemArchitecture.dataAccessOperation()") public void doReleaseLock() &#123; // ... &#125;&#125; Around advice这时最后一个类型的增强。他可以在方法的前后执行，并且能够决何时，如何执行方法。Around advice常常用于需要在方法执行前后共享状态。Around 增强的注解为@Around。它的第一个参数一定要是ProceedingJoinPoint类型的。在增强的方法体里，调用ProceedingJoinPoint的proceed()方法来使剩下的方法执行。proceed方法还可以参入一个Object[]的参数，这个是方法执行的参数。 12345678910111213141516import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.ProceedingJoinPoint;@Aspectpublic class AroundExample &#123; @Around("com.xyz.myapp.SystemArchitecture.businessService()") public Object doBasicProfiling(ProceedingJoinPoint pjp) throws Throwable &#123; // start stopwatch Object retVal = pjp.proceed(); // stop stopwatch return retVal; &#125;&#125; Advice parametersSpring提供了全部类型的advice，这意味着你可以在advice签名中声明你需要的参数(向我们上面的returning和throwing一样)而不是一直用Object[]。下面我们会看到如何在advice中使用参数和上下文。首先我们看一下如何写一个通用的advice来发现当前被增强的方法。 访问当前join point每一个增强的第一个参数都可以是org.aspectj.lang.JoinPoint(注意around advice的第一个参数是ProceedingJoinPoint，它是JoinPoint的子类。) 向advice传递参数我们已经看到如何绑定返回值和异常值到advice。要想绑定参数值，你可以用args。如果参数名代替类型出现在args表达式中，当advice触发时对应参数的值就会传入到该增强中。看下面一个例子。假设你想增强dao的执行，并且希望Account对象为第一个参数，你还想再advice体中访问这个参数。你可以写成下面形式: 1234@Before("com.xyz.myapp.SystemArchitecture.dataAccessOperation() &amp;&amp; args(account,..)")public void validateAccount(Account account) &#123; // ...&#125; arg(account,..)有两个意图:第一，它限制匹配至少一个参数，并且参数是Account实例；第二，它使advice可以通过account参数来访问实际的Account参数。另一种写法就是声明一个切点，提供Account对象。此时advice只需要引用这个切点名就行了。1234567@Pointcut("com.xyz.myapp.SystemArchitecture.dataAccessOperation() &amp;&amp; args(account,..)")private void accountDataAccessOperation(Account account) &#123;&#125;@Before("accountDataAccessOperation(account)")public void validateAccount(Account account) &#123; // ...&#125; 代理对象(this),目标对象(target),注解(@within,@target,@annotation,@args)也可以用类似的方式绑定。下面一个例子展示和如何匹配@Auditable注解和怎么抽取数据。 首先定义@Auditable注解12345@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.METHOD)public @interface Auditable &#123; AuditCode value();&#125; 接着定义advice(增强)来匹配@Auditable方法:12345@Before("com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; @annotation(auditable)")public void audit(Auditable auditable) &#123; AuditCode code = auditable.value(); // ...&#125; Advice泛型参数Spring AOP可以处理泛型类和方法。假设你有一个泛型类如下:1234public interface Sample&lt;T&gt; &#123; void sampleGenericMethod(T param); void sampleGenericCollectionMethod(Collection&lt;T&gt; param);&#125; 使用advice参数，你可以限制拦截的方法的参数1234@Before("execution(* ..Sample+.sampleGenericMethod(*)) &amp;&amp; args(param)")public void beforeSampleMethod(MyType param) &#123; // Advice implementation&#125; 上述方法不能用在泛型集合上。比如下面这种写法就是错的！1234@Before("execution(* ..Sample+.sampleGenericCollectionMethod(*)) &amp;&amp; args(param)")public void beforeSampleMethod(Collection&lt;MyType&gt; param) &#123; // Advice implementation&#125; 为了使上面工作，我们必须检查集合中的每一个元素，这个是不合理的就像在泛型中出现null一样。为了达到类似的效果，你可以使用参数Collection&lt;?&gt;，然后手动的一个个的检查参数类型。 决定参数名字advice触发时的参数依赖于pointcut表达式中的参数名和声明在(advice和pointcut)方法签名中参数名的匹配。但是参数名在java反射中是无法获取的，所以Spring AOP用了下面机制来确定方法名。 用户显示声明参数值，advice和pointcut注解都有一个可选的”argNames”属性，这些参数运行时可用。比如 123456@Before(value="com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; target(bean) &amp;&amp; @annotation(auditable)", argNames="bean,auditable")public void audit(Object bean, Auditable auditable) &#123; AuditCode code = auditable.value(); // ... use code and bean&#125; 如果第一个参数是JoinPoint, ProceedingJoinPoint, 或 JoinPoint.StaticPart类型，你可以在argNames属性中省略改名字。比如如果上面的例子接收一个join point对象。 123456@Before(value="com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; target(bean) &amp;&amp; @annotation(auditable)", argNames="bean,auditable")public void audit(JoinPoint jp, Object bean, Auditable auditable) &#123; AuditCode code = auditable.value(); // ... use code, bean, and jp&#125; 这种方式对那些不需要其他join point上下文的增强特别方便，就不必写argNames属性了。 使用’argNames’属性有点笨拙，所以如果’argNames’属性没有声明，Spring AOP会看debug信息，从本地变量表中决定参数名称。这个信息只要class编译时加参数’-g:vars’就可以了。加这个参数会有如下3个影响:(1)你的代码会更容易理解。(2)class文件会稍微大点。(3)去除无用本地变量的优化将不会开启。总而言之，这个对你没啥影响。 如果@AspectJ被AspectJ编译器(ajc)编译，这不需要debug information。 如果代码编译没有debug信息，Spring AOP会尝试着推断(比如，如果切点表达式只有一个参数，增强方法也只有一个参数，显然就是它)。如果参数绑定是模棱两可的，者会抛出AmbiguousBindingException异常。 如果上述机制全都失败，者会抛出IllegalArgumentException异常。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[spring XML extensions]]></title>
      <url>%2F2017%2F11%2F19%2Fspring-XML-extensions%2F</url>
      <content type="text"><![CDATA[背景最近看dubbo源码，其中使用spring加载配置的时候用到了自定义xml标签的功能。所以就看了一下。其实从spring2.0开始就已经有该功能了。 步骤其实自定义xml标签十分简单，只需要一下四步 描述自定义元素的xml schema NamespaceHandler BeanDefinitionParse 在spring上注册上面这些元素 编写xml schema创建文件myns.xsd123456789101112131415161718192021&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsd:schema xmlns="http://www.mycompany.com/schema/myns" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:beans="http://www.springframework.org/schema/beans" targetNamespace="http://www.mycompany.com/schema/myns" elementFormDefault="qualified" attributeFormDefault="unqualified"&gt; &lt;xsd:import namespace="http://www.springframework.org/schema/beans"/&gt; &lt;xsd:element name="dateformat"&gt; &lt;xsd:complexType&gt; &lt;xsd:complexContent&gt; &lt;xsd:extension base="beans:identifiedType"&gt; &lt;xsd:attribute name="lenient" type="xsd:boolean"/&gt; &lt;xsd:attribute name="pattern" type="xsd:string" use="required"/&gt; &lt;/xsd:extension&gt; &lt;/xsd:complexContent&gt; &lt;/xsd:complexType&gt; &lt;/xsd:element&gt;&lt;/xsd:schema&gt; 具体语法 NamespaceHandler用于解析我们上面定义的命名空间常规用法为每一个顶级的xml元素定义一个bean definition，比如上面的xml schema中dateformat就对应一个bean definition12345678910111213package org.springframework.samples.xml;import org.springframework.beans.factory.xml.NamespaceHandlerSupport;public class MyNamespaceHandler extends NamespaceHandlerSupport &#123; //在handler被调用前调用 public void init() &#123; //此处为xml顶级元素dateformat注册了一个bean definition registerBeanDefinitionParser("dateformat", new SimpleDateFormatBeanDefinitionParser()); &#125;&#125; 在这个例子中NamespaceHandler中并没有太多逻辑，它其实就是一个分发作用，可以在其上注册很多的bean definition，对应每一个自定义标签。具体的处理逻辑在bean definition中。 BeanDefinitionParseBeanDefinitionParse用于解析一个自定义schema中单独的顶级xml元素。123456789101112131415161718192021222324252627282930package org.springframework.samples.xml;import org.springframework.beans.factory.support.BeanDefinitionBuilder;import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;import org.springframework.util.StringUtils;import org.w3c.dom.Element;import java.text.SimpleDateFormat;public class SimpleDateFormatBeanDefinitionParser extends AbstractSingleBeanDefinitionParser &#123; //解析后的目标class protected Class getBeanClass(Element element) &#123; return SimpleDateFormat.class; &#125; //如何解析xml protected void doParse(Element element, BeanDefinitionBuilder bean) &#123; // this will never be null since the schema explicitly requires that a value be supplied String pattern = element.getAttribute("pattern"); bean.addConstructorArg(pattern); // this however is an optional property String lenient = element.getAttribute("lenient"); if (StringUtils.hasText(lenient)) &#123; bean.addPropertyValue("lenient", Boolean.valueOf(lenient)); &#125; &#125;&#125; 在spring上注册上面这些元素这一步是最后一步，就是把前面的工作串起来，其实就是配置两个文件: META-INF/spring.handlers 配置xml schema 和 namespace handler class的关系，本例中配置如下： http\://www.mycompany.com/schema/myns=org.springframework.samples.xml.MyNamespaceHandler ‘:’在java的properties文件中是关键字，所以要转移 key值http\://www.mycompany.com/schema/myns 对应schema，value就是namespace handler的实现类 META-INF/spring.schemas 指定xml schema文件的位置，本例中配置如下： http\://www.mycompany.com/schema/myns/myns.xsd=org/springframework/samples/xml/myns.xsd 使用经过上面4步以后，在程序就就可以使用自定义的标签了，用法如下： 12345678910111213141516&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:myns="http://www.mycompany.com/schema/myns" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.mycompany.com/schema/myns http://www.mycompany.com/schema/myns/myns.xsd"&gt; &lt;!--注意这里需要引用标签 xmlns:myns="http://www.mycompany.com/schema/myns"--&gt; &lt;!--并且在schemaLocation中加入自定义标签的文职--&gt; &lt;!-- as a top-level bean --&gt; &lt;myns:dateformat id="defaultDateFormat" pattern="yyyy-MM-dd HH:mm" lenient="true"/&gt;&lt;/beans&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[java 序列化(一)]]></title>
      <url>%2F2017%2F07%2F23%2Fjava-%E5%BA%8F%E5%88%97%E5%8C%96-%E4%B8%80%2F</url>
      <content type="text"><![CDATA[java序列化废话序列化就是为了保存在内存中的各种对象的状态，并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存Object States，但是Java给你提供一种应该比你自己好的保存对象状态的机制,那就是序列化。在java中实现Serializable接口就说明该类可以被序列化。一般用于: 把内存中对象保存在文件或数据库中 网络传输 几个问题1.静态成员变量可以被序列化么？ 不行的。 1234567891011121314151617181920212223242526public class Foo implements Serializable &#123; private static final long serialVersionUID = -3450064362986273896L; public static int a = 1;&#125;public class SerialMain &#123; public static void main(String[] arg) throws IOException, ClassNotFoundException &#123; Foo myFoo = new Foo(); Foo.a = 100; FileOutputStream fs = new FileOutputStream("foo.ser"); ObjectOutputStream os = new ObjectOutputStream(fs); os.writeObject(myFoo); os.close(); Foo.setA(10000); FileInputStream fi=new FileInputStream("foo.ser"); ObjectInputStream oi=new ObjectInputStream(fi); Foo box=(Foo)oi.readObject(); oi.close(); System.out.println(box); &#125;&#125; 结果为 a=10000因为序列化是记录对象的状态，并不记录类的状态。 2.serialVersionUID的作用serialVersionUID可以理解为可序列化对象的一个运行时版本号，当反序列化时jvm会对比目标对象和源数据之间的版本号是否一致，如果不一致会报InvalidClassException。导致serialVersionUID不一致的可能有很多，比如对象属性的变化，环境的不同等，所以为了兼容性，建议Serializable对象都定义一个serialVersionUID成员变量，格式如上代码所示。这样既能避免环境问题，又能当对象版本变化时不报错（此时只序列化能识别的对象，但是我感觉这并不是一个好的现象，这样会不能及时发现升级，有可能造成更大的错误。） 3.enum序列化enum序列化其实被序列化的是名字，反序列化时用valueof方法来匹配，这个比较坑，特别是系统升级时，所以使用时一定要谨慎。 protobuff什么是protobufprotobuff是google开源的语言无关，平台无关的可扩展的序列化结构（就像xml一样，不过更简单，更高效）。用户可以通过一次定义如何构建数据，然后可以使用不同的语言方便的读写这些数据。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2-Binding学习笔记]]></title>
      <url>%2F2017%2F04%2F17%2FAngular2-Binding%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[纵观全局绑定的类型可以根据数据流的方向分成三类： 1.从数据源到视图 2.从视图到数据源 3.双向的从视图到数据源再到视图 下面是三种绑定的比较，里面具体名词不清楚没关系，后面会讲到 第一类绑定： 指令 ===&gt; 视图目标该绑定数据从指令流向模板中，主要有一下几种 1.插值表达式 2.绑定到Property上 3.绑定到Attribute上 4.绑定到class上 5.绑定到style上 注：在分别讲这几种类型之前先明确一个概念: Property vs Attribute (转自angular官网)HTML attribute 与 DOM property 的对比要想理解 Angular 绑定如何工作，重点是搞清 HTML attribute 和 DOM property 之间的区别。&emsp;&emsp;1.attribute 是由 HTML 定义的。property 是由 DOM (Document Object Model) 定义的。&emsp;&emsp;2.少量 HTML attribute 和 property 之间有着 1:1 的映射，如id。&emsp;&emsp;3.有些 HTML attribute 没有对应的 property，如colspan。&emsp;&emsp;4.有些 DOM property 没有对应的 attribute，如textContent。&emsp;&emsp;5.大量 HTML attribute看起来映射到了property…… 但却不像我们想的那样！最后一类尤其让人困惑…… 除非我们能理解这个普遍原则：attribute 初始化 DOM property，然后它们的任务就完成了。property 的值可以改变；attribute 的值不能改变。例如，当浏览器渲染&lt;input type=”text” value=”Bob”&gt;时，它将创建相应 DOM 节点， 其value property 被初始化为 “Bob”。当用户在输入框中输入 “Sally” 时，DOM 元素的value property 变成了 “Sally”。 但是这个 HTML value attribute 保持不变。如果我们读取 input 元素的 attribute，就会发现确实没变： input.getAttribute(‘value’) // 返回 “Bob”。HTML attribute value指定了初始值；DOM value property 是当前值。disabled attribute 是另一个古怪的例子。按钮的disabled property 是false，因为默认情况下按钮是可用的。 当我们添加disabled attribute 时，只要它出现了按钮的disabled property 就初始化为true，于是按钮就被禁用了。添加或删除disabled attribute会禁用或启用这个按钮。但 attribute 的值无关紧要，这就是我们为什么没法通过 &lt;button disabled=”false”&gt;仍被禁用&lt;/button&gt;这种写法来启用按钮。设置按钮的disabled property（如，通过 Angular 绑定）可以禁用或启用这个按钮。 这就是 property 的价值。就算名字相同，HTML attribute 和 DOM property 也不是同一样东西。 简单来说就是HTML attribute是html元素定义的时候，定义完以后angular中操作改变的都是DOM property的值，所以除了插值表达式之外的绑定类型，在等号左边是目标名， 无论是包在括号中 ([]、()) 还是用前缀形式 (bind-、on-、bindon-)，这个目标名就是属性（Property）的名字。 插值表达式插值表达式是绑定中最简单的一种，就是把{ { } }中的计算结果插入到HTML标签内的文本上，或给标签的属性赋值。&lt;h3&gt; { { title } } &lt;img src=&quot;{ {heroImageUrl} }&quot; style=&quot;height:30px&quot;&gt; &lt;p&gt;The sum of 1 + 1 is { {1 + 1} }&lt;/p&gt;&lt;/h3&gt; 第一处是直接插入到HTML标签内的文本，第二处是给标签的属性赋值，第三处是也是给HTML标签内的文本插值，但是值是经过计算得来的 绑定到Property绑定到property分为两类: 元素的property &lt;button [disabled]=&quot;isUnchanged&quot;&gt;Cancel is disabled&lt;/button&gt; 指令(组件)的property 设置angular自带指令的属性(这个在属性型指令和结构型指令中会细讲) &lt;div [ngClass]=&quot;classes&quot;&gt;[ngClass] binding to the classes property&lt;/div&gt; 设置自定义的组件(指令)的属性 &lt;hero-detail [heroName]=&quot;hero&quot; &gt;&lt;/hero-detail&gt; 此时hero-detail的代码如下: 12345678910@Component(&#123; selector: &apos;hero-detail&apos;, template: ` &lt;h1&gt;heroName: &#123;&#123;heroName&#125;&#125;&lt;/h1&gt;`,&#125;)export class HeroDetailComponent &#123; @Input() heroName:string;&#125; 即[heroName]就是组件中的待输入的property，类似java中的一个类的构造参数 绑定到property的过程是单向的，即从组件的数据流向目标属性的数据，如果必须读取目标元素上的属性或调用它的某个方法，得用另一种技术 — ViewChild 和 ContentChild。 绑定到Attribute&emsp;&emsp;绑定到Attribute的原因大多是元素没有属性可绑的时候，所以必须使用attribute绑定。table中的 colspan/rowspan 等 attribute。 它们是纯粹的 attribute，没有对应的属性可供绑定。 12345678&lt;table border=1&gt; &lt;!-- expression calculates colspan=2 --&gt; &lt;tr&gt;&lt;td [attr.colspan]=&quot;1 + 1&quot;&gt;One-Two&lt;/td&gt;&lt;/tr&gt; &lt;!-- ERROR: There is no `colspan` property to set! &lt;tr&gt;&lt;td colspan=&quot;&#123;&#123;1 + 1&#125;&#125;&quot;&gt;Three-Four&lt;/td&gt;&lt;/tr&gt; --&gt; &lt;tr&gt;&lt;td&gt;Five&lt;/td&gt;&lt;td&gt;Six&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 绑定到CSS上借助 CSS 类绑定，可以从元素的class attribute 上添加和移除 CSS 类名。12&lt;!-- toggle the &quot;special&quot; class on/off with a property --&gt;&lt;div [class.special]=&quot;isSpecial&quot;&gt;The class binding is special&lt;/div&gt; 绑定到style上样式绑定的语法与属性绑定类似12&lt;button [style.color]=&quot;isSpecial ? &apos;red&apos;: &apos;green&apos;&quot;&gt;Red&lt;/button&gt;&lt;button [style.background-color]=&quot;canSave ? &apos;cyan&apos;: &apos;grey&apos;&quot; &gt;Save&lt;/button&gt; 第二类绑定：视图目标 ===&gt; 指令基本语法 :圆括号中的名称 —— 比如(click) —— 标记出目标事件。在下面例子中，目标是按钮的 click 事件。1&lt;button (click)=&quot;onSave($event)&quot;&gt;Save&lt;/button&gt; 绑定会通过名叫$event的事件对象传递关于此事件的信息(包括数据值) 使用EventEmitter实现自定义事件通常，指令使用 Angular EventEmitter 来触发自定义事件。 指令创建一个EventEmitter实例，并且把它作为属性暴露出来。 指令调用EventEmitter.emit(payload)来触发事件，可以传入任何东西作为消息载荷。 父指令通过绑定到这个属性来监听事件，并通过$event对象来访问载荷。 假设HeroDetailComponent用于显示英雄的信息，并响应用户的动作。 虽然HeroDetailComponent包含删除按钮，但它自己并不知道该如何删除这个英雄。 最好的做法是触发事件来报告“删除用户”的请求。、 123456789101112131415template: `&lt;div&gt; &lt;img src=&quot;&#123;&#123;heroImageUrl&#125;&#125;&quot;&gt; &lt;span [style.text-decoration]=&quot;lineThrough&quot;&gt; &#123;&#123;prefix&#125;&#125; &#123;&#123;hero?.name&#125;&#125; &lt;/span&gt; &lt;button (click)=&quot;delete()&quot;&gt;Delete&lt;/button&gt;&lt;/div&gt;`// This component make a request but it can&apos;t actually delete a hero.deleteRequest = new EventEmitter&lt;Hero&gt;();delete() &#123; this.deleteRequest.emit(this.hero);&#125; 组件定义了deleteRequest属性，它是EventEmitter实例。 当用户点击删除时，组件会调用delete()方法，让EventEmitter发出一个Hero对象。 现在，假设有个宿主的父组件，它绑定了HeroDetailComponent的deleteRequest事件。 1&lt;hero-detail (deleteRequest)=&quot;deleteHero($event)&quot; [hero]=&quot;currentHero&quot;&gt;&lt;/hero-detail&gt; 当deleteRequest事件触发时，Angular 调用父组件的deleteHero方法， 在$event变量中传入要删除的英雄（来自HeroDetail）。 上面这个例子就可以看成hero-detail组件自定义了一个deleteRequest事件（可以类比button元素的click事件） 第三类绑定：视图目标 &lt;===&gt; 指令 (双向邦定)简单来说双向绑定就是既要设置 元素属性 ，又要监听元素事件变化。Angular 为此提供一种特殊的双向数据绑定语法：[(x)]。 [(x)]语法结合了属性绑定的方括号[x]和事件绑定的圆括号(x)当一个元素拥有可以设置的属性x和对应的事件xChange时，解释[(x)]语法就容易多了。 下面的SizerComponent符合这个模式。它有size属性和伴随的sizeChange事件： sizer.component.ts1234567891011121314151617181920import &#123; Component, EventEmitter, Input, Output &#125; from &apos;@angular/core&apos;;@Component(&#123; selector: &apos;my-sizer&apos;, template: ` &lt;div&gt; &lt;button (click)=&quot;dec()&quot; title=&quot;smaller&quot;&gt;-&lt;/button&gt; &lt;button (click)=&quot;inc()&quot; title=&quot;bigger&quot;&gt;+&lt;/button&gt; &lt;label [style.font-size.px]=&quot;size&quot;&gt;FontSize: &#123;&#123;size&#125;&#125;px&lt;/label&gt; &lt;/div&gt;`&#125;)export class SizerComponent &#123; @Input() size: number | string; @Output() sizeChange = new EventEmitter&lt;number&gt;(); dec() &#123; this.resize(-1); &#125; inc() &#123; this.resize(+1); &#125; resize(delta: number) &#123; this.size = Math.min(40, Math.max(8, +this.size + delta)); this.sizeChange.emit(this.size); &#125;&#125; 这段代码重在于: size是一个输入属性用于初始 点击smaller或bigger会触发size大小的变化 size大小变化后会触发sizeChange事件(这里用到了上文中说到的EventEmitter) app.component.ts12&lt;my-sizer [(size)]=&quot;fontSizePx&quot;&gt;&lt;/my-sizer&gt;&lt;div [style.font-size.px]=&quot;fontSizePx&quot;&gt;Resizable Text&lt;/div&gt; 在这列AppComponent的fontSizePx就被双向绑定到了SizerComponent上 SizerComponent的size的初始值就是AppComponent的fontSizePx 在SizerComponent组件内通过点击按钮更新size的大小会影响fontSizePx的大小，最终会改变Resizable Text的显示 双向绑定语法实际上是属性绑定和事件绑定的语法糖。 Angular将SizerComponent的绑定分解成这样：1&lt;my-sizer [size]=&quot;fontSizePx&quot; (sizeChange)=&quot;fontSizePx=$event&quot;&gt;&lt;/my-sizer&gt; 我们希望能在像&lt;input&gt;和&lt;select&gt;这样的 HTML 元素上使用双向数据绑定。 可惜，原生 HTML 元素不遵循x值和xChange事件的模式。 幸运的是，Angular 以 NgModel 指令为桥梁，允许在表单元素上使用双向数据绑定。 在使用ngModel指令之前需要先引入FormsModule 现在假设我们需要把一个input的value属性和输入变更都绑定到组件的myName属性。 使用以下方式也可以满足这个需求:12&lt;input [value]=&quot;myName&quot; (input)=&quot;myName&quot; &gt; 但是这个很不好用，因为你需要记住每一个标签的设置值得属性和变更时需要绑定的事件使用ngModel你可以用下面的方式完成同样的功能,它使用ngModel这个指令屏蔽了不同标签的设置属性和变更事件。123&lt;input [ngModel]=&quot;myName&quot; (ngModelChange)=&quot;myName&quot;&gt; 上面代码可以简写为:1&lt;input [(ngModel)]=&quot;myName&quot;&gt; 使用第二种方法比较简单，但是它的局限是只能完成属性值的绑定，如果想要实现更复杂的功能还是需要使用第一种写法。 因为HTML的元素实现细节不同，所以angular2只对基本的HTML Form元素提供了支持。 源码https://github.com/qwang1990/angular2/tree/master/angular_binding]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2 Module学习笔记]]></title>
      <url>%2F2017%2F04%2F08%2FAngular2-Module%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[概念Angular 模块能帮你把应用组织成多个内聚的功能块，可以类比java的package 定义1234567@NgModule(&#123; imports: [ CommonModule ], declarations: [ TitleComponent ], exports: [ TitleComponent ], providers: [ UserService ], &lt;!--bootstrap: [ AppComponent ]--&gt;&#125;) Angular 模块是一个由@NgModule装饰器提供元数据的类，元数据包括： imports: 导入其它模块，从其它模块中获得本模块所需的组件、指令和管道 declarations: 声明哪些组件、指令、管道属于该模块 exports: 公开某些类，以便其它的组件模板可以使用它们 provider: 在应用程序级提供服务，以便应用中的任何组件都能使用它 bootstrap: 把指定组件标记为引导 (bootstrap) 组件。当 Angular 引导应用时，它会在 DOM 中渲染AppComponent，并把结果放进index.html的元素标记内部。这个元数据只有根模块有。 模块基本使用 声明组件和指令: 定义的组件和指令必须在模块中声明了，模板才能识别组件和指令对应的标签 例如我们定义指令HighlightDirective： import { Directive, ElementRef } from &apos;@angular/core&apos;; @Directive({ selector: &apos;[highlight]&apos; }) /** Highlight the attached element in gold */ export class HighlightDirective { constructor(el: ElementRef) { el.nativeElement.style.backgroundColor = &apos;gold&apos;; console.log( `* AppRoot highlight called for ${el.nativeElement.tagName}`); } } 在使用 &lt;h1 highlight&gt;{{title}}&lt;/h1&gt; 前必须要在我们的module的declaration中加入如下定义： declarations: [ ... HighlightDirective, ... ], 服务提供商模块可以往应用的“根依赖注入器”中添加提供商，让那些服务在应用中到处可用,这个和在组件中提供服务不同。组件中提供的服务是分层级的。这个在多级注入的时候会讲到。 特性模块 为什么要有多个模块&emsp;&emsp;随着应用越来越大，如果只是用一个根模块就会出现很多问题。 比如指令冲突，我们在一个类中定义了ADirective，然后再另一个类中定义了同名的ADirective，并且他们的selector一样都是’sameName’.当我们在别处使用这个&lt;sameName … &gt;时就会出现，后一个declaration的指令会覆盖前一个declaration的指令。 什么是特性模块特性模块和根模块一样都是是带有@NgModule装饰器及其元数据的类，它和根模块有着同一个依赖注入器。不同点是: 1.我们引导根模块来启动应用，但导入特性模块来扩展应用。 2.特性模块可以对其它模块暴露或隐藏自己的实现。(通过exports来控制) 一个使用特性模块的小技巧—重新导出场景如下:&emsp;&emsp; 你有一个特性模块A, 它引入了CommonModule和FormsModule在自身模块内使用, 这时另一个模块B导入模块A, 而且B也需要使用CommonModule和FormsModule, 正常情况下B还需要导入CommonModule和FormsModule这两个模块,但如果模块A将CommonModule和FormsModule export出去, 这时B就只需导入A模块即可。 没图说个XX 本例中RootModule分别引入了ModuleM和ModuleW ModuleM 声明了两个组件, 导入了FormModule, 并提供了ServiceMA服务,最后它导出了自己的其中一个组件ComponentMA和ForModule ModuleW 声明了两个组件, 导入了RouterModule, 并提供了ServiceWA服务,最后它只导出了自己的其中一个组件ComponentMA 此时会有以下结果: 1. ModuleM 中可以使用自己声明的组件(即在自己的模板中使用组件的selector标签)和FormModule中的功能。 2. ModuleW 中可以使用自己声明的组件(即在自己的模板中使用组件的selector标签)和RouterModule中的功能。 3. 全局中都能使用 serviceA,ServiceMA,serviceWA。以为模块级别的依赖注入器是同一个。 4. 在RootModule中可以使用FormModule,ComponentMA和ComponentWB。 源码：https://github.com/qwang1990/angular2/tree/master/angular_module]]></content>
    </entry>

    
  
  
</search>
