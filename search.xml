<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Angular2-Binding学习笔记]]></title>
      <url>%2F2017%2F04%2F17%2FAngular2-Binding%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[纵观全局绑定的类型可以根据数据流的方向分成三类： 1.从数据源到视图 2.从视图到数据源 3.双向的从视图到数据源再到视图 下面是三种绑定的比较，里面具体名词不清楚没关系，后面会讲到 第一类绑定： 指令 ===&gt; 视图目标该绑定数据从指令流向模板中，主要有一下几种 1.插值表达式 2.绑定到Property上 3.绑定到Attribute上 4.绑定到class上 5.绑定到style上 注：在分别讲这几种类型之前先明确一个概念: Property vs Attribute (转自angular官网)HTML attribute 与 DOM property 的对比要想理解 Angular 绑定如何工作，重点是搞清 HTML attribute 和 DOM property 之间的区别。&emsp;&emsp;1.attribute 是由 HTML 定义的。property 是由 DOM (Document Object Model) 定义的。&emsp;&emsp;2.少量 HTML attribute 和 property 之间有着 1:1 的映射，如id。&emsp;&emsp;3.有些 HTML attribute 没有对应的 property，如colspan。&emsp;&emsp;4.有些 DOM property 没有对应的 attribute，如textContent。&emsp;&emsp;5.大量 HTML attribute看起来映射到了property…… 但却不像我们想的那样！最后一类尤其让人困惑…… 除非我们能理解这个普遍原则：attribute 初始化 DOM property，然后它们的任务就完成了。property 的值可以改变；attribute 的值不能改变。例如，当浏览器渲染&lt;input type=”text” value=”Bob”&gt;时，它将创建相应 DOM 节点， 其value property 被初始化为 “Bob”。当用户在输入框中输入 “Sally” 时，DOM 元素的value property 变成了 “Sally”。 但是这个 HTML value attribute 保持不变。如果我们读取 input 元素的 attribute，就会发现确实没变： input.getAttribute(‘value’) // 返回 “Bob”。HTML attribute value指定了初始值；DOM value property 是当前值。disabled attribute 是另一个古怪的例子。按钮的disabled property 是false，因为默认情况下按钮是可用的。 当我们添加disabled attribute 时，只要它出现了按钮的disabled property 就初始化为true，于是按钮就被禁用了。添加或删除disabled attribute会禁用或启用这个按钮。但 attribute 的值无关紧要，这就是我们为什么没法通过 &lt;button disabled=”false”&gt;仍被禁用&lt;/button&gt;这种写法来启用按钮。设置按钮的disabled property（如，通过 Angular 绑定）可以禁用或启用这个按钮。 这就是 property 的价值。就算名字相同，HTML attribute 和 DOM property 也不是同一样东西。 简单来说就是HTML attribute是html元素定义的时候，定义完以后angular中操作改变的都是DOM property的值，所以除了插值表达式之外的绑定类型，在等号左边是目标名， 无论是包在括号中 ([]、()) 还是用前缀形式 (bind-、on-、bindon-)，这个目标名就是属性（Property）的名字。 插值表达式插值表达式是绑定中最简单的一种，就是把{ { } }中的计算结果插入到HTML标签内的文本上，或给标签的属性赋值。&lt;h3&gt; { { title } } &lt;img src=&quot;{ {heroImageUrl} }&quot; style=&quot;height:30px&quot;&gt; &lt;p&gt;The sum of 1 + 1 is { {1 + 1} }&lt;/p&gt;&lt;/h3&gt; 第一处是直接插入到HTML标签内的文本，第二处是给标签的属性赋值，第三处是也是给HTML标签内的文本插值，但是值是经过计算得来的 绑定到Property绑定到property分为两类: 元素的property &lt;button [disabled]=&quot;isUnchanged&quot;&gt;Cancel is disabled&lt;/button&gt; 指令(组件)的property 设置angular自带指令的属性(这个在属性型指令和结构型指令中会细讲) &lt;div [ngClass]=&quot;classes&quot;&gt;[ngClass] binding to the classes property&lt;/div&gt; 设置自定义的组件(指令)的属性 &lt;hero-detail [heroName]=&quot;hero&quot; &gt;&lt;/hero-detail&gt; 此时hero-detail的代码如下: 12345678910@Component(&#123; selector: &apos;hero-detail&apos;, template: ` &lt;h1&gt;heroName: &#123;&#123;heroName&#125;&#125;&lt;/h1&gt;`,&#125;)export class HeroDetailComponent &#123; @Input() heroName:string;&#125; 即[heroName]就是组件中的待输入的property，类似java中的一个类的构造参数 绑定到property的过程是单向的，即从组件的数据流向目标属性的数据，如果必须读取目标元素上的属性或调用它的某个方法，得用另一种技术 — ViewChild 和 ContentChild。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2 Module学习笔记]]></title>
      <url>%2F2017%2F04%2F08%2FAngular2-Module%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[概念Angular 模块能帮你把应用组织成多个内聚的功能块，可以类比java的package 定义1234567@NgModule(&#123; imports: [ CommonModule ], declarations: [ TitleComponent ], exports: [ TitleComponent ], providers: [ UserService ], &lt;!--bootstrap: [ AppComponent ]--&gt;&#125;) Angular 模块是一个由@NgModule装饰器提供元数据的类，元数据包括： imports: 导入其它模块，从其它模块中获得本模块所需的组件、指令和管道 declarations: 声明哪些组件、指令、管道属于该模块 exports: 公开某些类，以便其它的组件模板可以使用它们 provider: 在应用程序级提供服务，以便应用中的任何组件都能使用它 bootstrap: 把指定组件标记为引导 (bootstrap) 组件。当 Angular 引导应用时，它会在 DOM 中渲染AppComponent，并把结果放进index.html的元素标记内部。这个元数据只有根模块有。 模块基本使用 声明组件和指令: 定义的组件和指令必须在模块中声明了，模板才能识别组件和指令对应的标签 例如我们定义指令HighlightDirective： import { Directive, ElementRef } from &apos;@angular/core&apos;; @Directive({ selector: &apos;[highlight]&apos; }) /** Highlight the attached element in gold */ export class HighlightDirective { constructor(el: ElementRef) { el.nativeElement.style.backgroundColor = &apos;gold&apos;; console.log( `* AppRoot highlight called for ${el.nativeElement.tagName}`); } } 在使用 &lt;h1 highlight&gt;{{title}}&lt;/h1&gt; 前必须要在我们的module的declaration中加入如下定义： declarations: [ ... HighlightDirective, ... ], 服务提供商模块可以往应用的“根依赖注入器”中添加提供商，让那些服务在应用中到处可用,这个和在组件中提供服务不同。组件中提供的服务是分层级的。这个在多级注入的时候会讲到。 特性模块 为什么要有多个模块&emsp;&emsp;随着应用越来越大，如果只是用一个根模块就会出现很多问题。 比如指令冲突，我们在一个类中定义了ADirective，然后再另一个类中定义了同名的ADirective，并且他们的selector一样都是’sameName’.当我们在别处使用这个&lt;sameName … &gt;时就会出现，后一个declaration的指令会覆盖前一个declaration的指令。 什么是特性模块特性模块和根模块一样都是是带有@NgModule装饰器及其元数据的类，它和根模块有着同一个依赖注入器。不同点是: 1.我们引导根模块来启动应用，但导入特性模块来扩展应用。 2.特性模块可以对其它模块暴露或隐藏自己的实现。(通过exports来控制) 一个使用特性模块的小技巧—重新导出场景如下:&emsp;&emsp; 你有一个特性模块A, 它引入了CommonModule和FormsModule在自身模块内使用, 这时另一个模块B导入模块A, 而且B也需要使用CommonModule和FormsModule, 正常情况下B还需要导入CommonModule和FormsModule这两个模块,但如果模块A将CommonModule和FormsModule export出去, 这时B就只需导入A模块即可。 没图说个XX 本例中RootModule分别引入了ModuleM和ModuleW ModuleM 声明了两个组件, 导入了FormModule, 并提供了ServiceMA服务,最后它导出了自己的其中一个组件ComponentMA和ForModule ModuleW 声明了两个组件, 导入了RouterModule, 并提供了ServiceWA服务,最后它只导出了自己的其中一个组件ComponentMA 此时会有以下结果: 1. ModuleM 中可以使用自己声明的组件(即在自己的模板中使用组件的selector标签)和FormModule中的功能。 2. ModuleW 中可以使用自己声明的组件(即在自己的模板中使用组件的selector标签)和RouterModule中的功能。 3. 全局中都能使用 serviceA,ServiceMA,serviceWA。以为模块级别的依赖注入器是同一个。 4. 在RootModule中可以使用FormModule,ComponentMA和ComponentWB。 源码：https://github.com/qwang1990/angular2/tree/master/angular_module]]></content>
    </entry>

    
  
  
</search>
